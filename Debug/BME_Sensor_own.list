
BME_Sensor_own.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080034a0  080034a0  000134a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034d8  080034d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080034d8  080034d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034d8  080034d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034d8  080034d8  000134d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034dc  080034dc  000134dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  080034ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  080034ec  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af9e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000190e  00000000  00000000  0002afd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  0002c8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000830  00000000  00000000  0002d1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fb13  00000000  00000000  0002d9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d919  00000000  00000000  0003d4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005de54  00000000  00000000  0004ae14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a8c68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f38  00000000  00000000  000a8cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003488 	.word	0x08003488

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003488 	.word	0x08003488

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_i2f>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	2800      	cmp	r0, #0
 80003f8:	d013      	beq.n	8000422 <__aeabi_i2f+0x2e>
 80003fa:	17c3      	asrs	r3, r0, #31
 80003fc:	18c6      	adds	r6, r0, r3
 80003fe:	405e      	eors	r6, r3
 8000400:	0fc4      	lsrs	r4, r0, #31
 8000402:	0030      	movs	r0, r6
 8000404:	f000 f886 	bl	8000514 <__clzsi2>
 8000408:	239e      	movs	r3, #158	; 0x9e
 800040a:	0005      	movs	r5, r0
 800040c:	1a1b      	subs	r3, r3, r0
 800040e:	2b96      	cmp	r3, #150	; 0x96
 8000410:	dc0f      	bgt.n	8000432 <__aeabi_i2f+0x3e>
 8000412:	2808      	cmp	r0, #8
 8000414:	dd01      	ble.n	800041a <__aeabi_i2f+0x26>
 8000416:	3d08      	subs	r5, #8
 8000418:	40ae      	lsls	r6, r5
 800041a:	0276      	lsls	r6, r6, #9
 800041c:	0a76      	lsrs	r6, r6, #9
 800041e:	b2d8      	uxtb	r0, r3
 8000420:	e002      	b.n	8000428 <__aeabi_i2f+0x34>
 8000422:	2400      	movs	r4, #0
 8000424:	2000      	movs	r0, #0
 8000426:	2600      	movs	r6, #0
 8000428:	05c0      	lsls	r0, r0, #23
 800042a:	4330      	orrs	r0, r6
 800042c:	07e4      	lsls	r4, r4, #31
 800042e:	4320      	orrs	r0, r4
 8000430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000432:	2b99      	cmp	r3, #153	; 0x99
 8000434:	dd0c      	ble.n	8000450 <__aeabi_i2f+0x5c>
 8000436:	2205      	movs	r2, #5
 8000438:	0031      	movs	r1, r6
 800043a:	1a12      	subs	r2, r2, r0
 800043c:	40d1      	lsrs	r1, r2
 800043e:	000a      	movs	r2, r1
 8000440:	0001      	movs	r1, r0
 8000442:	0030      	movs	r0, r6
 8000444:	311b      	adds	r1, #27
 8000446:	4088      	lsls	r0, r1
 8000448:	1e41      	subs	r1, r0, #1
 800044a:	4188      	sbcs	r0, r1
 800044c:	4302      	orrs	r2, r0
 800044e:	0016      	movs	r6, r2
 8000450:	2d05      	cmp	r5, #5
 8000452:	dc12      	bgt.n	800047a <__aeabi_i2f+0x86>
 8000454:	0031      	movs	r1, r6
 8000456:	4f0d      	ldr	r7, [pc, #52]	; (800048c <__aeabi_i2f+0x98>)
 8000458:	4039      	ands	r1, r7
 800045a:	0772      	lsls	r2, r6, #29
 800045c:	d009      	beq.n	8000472 <__aeabi_i2f+0x7e>
 800045e:	200f      	movs	r0, #15
 8000460:	4030      	ands	r0, r6
 8000462:	2804      	cmp	r0, #4
 8000464:	d005      	beq.n	8000472 <__aeabi_i2f+0x7e>
 8000466:	3104      	adds	r1, #4
 8000468:	014a      	lsls	r2, r1, #5
 800046a:	d502      	bpl.n	8000472 <__aeabi_i2f+0x7e>
 800046c:	239f      	movs	r3, #159	; 0x9f
 800046e:	4039      	ands	r1, r7
 8000470:	1b5b      	subs	r3, r3, r5
 8000472:	0189      	lsls	r1, r1, #6
 8000474:	0a4e      	lsrs	r6, r1, #9
 8000476:	b2d8      	uxtb	r0, r3
 8000478:	e7d6      	b.n	8000428 <__aeabi_i2f+0x34>
 800047a:	1f6a      	subs	r2, r5, #5
 800047c:	4096      	lsls	r6, r2
 800047e:	0031      	movs	r1, r6
 8000480:	4f02      	ldr	r7, [pc, #8]	; (800048c <__aeabi_i2f+0x98>)
 8000482:	4039      	ands	r1, r7
 8000484:	0772      	lsls	r2, r6, #29
 8000486:	d0f4      	beq.n	8000472 <__aeabi_i2f+0x7e>
 8000488:	e7e9      	b.n	800045e <__aeabi_i2f+0x6a>
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	fbffffff 	.word	0xfbffffff

08000490 <__aeabi_ui2f>:
 8000490:	b570      	push	{r4, r5, r6, lr}
 8000492:	1e05      	subs	r5, r0, #0
 8000494:	d00e      	beq.n	80004b4 <__aeabi_ui2f+0x24>
 8000496:	f000 f83d 	bl	8000514 <__clzsi2>
 800049a:	239e      	movs	r3, #158	; 0x9e
 800049c:	0004      	movs	r4, r0
 800049e:	1a1b      	subs	r3, r3, r0
 80004a0:	2b96      	cmp	r3, #150	; 0x96
 80004a2:	dc0c      	bgt.n	80004be <__aeabi_ui2f+0x2e>
 80004a4:	2808      	cmp	r0, #8
 80004a6:	dd01      	ble.n	80004ac <__aeabi_ui2f+0x1c>
 80004a8:	3c08      	subs	r4, #8
 80004aa:	40a5      	lsls	r5, r4
 80004ac:	026d      	lsls	r5, r5, #9
 80004ae:	0a6d      	lsrs	r5, r5, #9
 80004b0:	b2d8      	uxtb	r0, r3
 80004b2:	e001      	b.n	80004b8 <__aeabi_ui2f+0x28>
 80004b4:	2000      	movs	r0, #0
 80004b6:	2500      	movs	r5, #0
 80004b8:	05c0      	lsls	r0, r0, #23
 80004ba:	4328      	orrs	r0, r5
 80004bc:	bd70      	pop	{r4, r5, r6, pc}
 80004be:	2b99      	cmp	r3, #153	; 0x99
 80004c0:	dd09      	ble.n	80004d6 <__aeabi_ui2f+0x46>
 80004c2:	0002      	movs	r2, r0
 80004c4:	0029      	movs	r1, r5
 80004c6:	321b      	adds	r2, #27
 80004c8:	4091      	lsls	r1, r2
 80004ca:	1e4a      	subs	r2, r1, #1
 80004cc:	4191      	sbcs	r1, r2
 80004ce:	2205      	movs	r2, #5
 80004d0:	1a12      	subs	r2, r2, r0
 80004d2:	40d5      	lsrs	r5, r2
 80004d4:	430d      	orrs	r5, r1
 80004d6:	2c05      	cmp	r4, #5
 80004d8:	dc12      	bgt.n	8000500 <__aeabi_ui2f+0x70>
 80004da:	0029      	movs	r1, r5
 80004dc:	4e0c      	ldr	r6, [pc, #48]	; (8000510 <__aeabi_ui2f+0x80>)
 80004de:	4031      	ands	r1, r6
 80004e0:	076a      	lsls	r2, r5, #29
 80004e2:	d009      	beq.n	80004f8 <__aeabi_ui2f+0x68>
 80004e4:	200f      	movs	r0, #15
 80004e6:	4028      	ands	r0, r5
 80004e8:	2804      	cmp	r0, #4
 80004ea:	d005      	beq.n	80004f8 <__aeabi_ui2f+0x68>
 80004ec:	3104      	adds	r1, #4
 80004ee:	014a      	lsls	r2, r1, #5
 80004f0:	d502      	bpl.n	80004f8 <__aeabi_ui2f+0x68>
 80004f2:	239f      	movs	r3, #159	; 0x9f
 80004f4:	4031      	ands	r1, r6
 80004f6:	1b1b      	subs	r3, r3, r4
 80004f8:	0189      	lsls	r1, r1, #6
 80004fa:	0a4d      	lsrs	r5, r1, #9
 80004fc:	b2d8      	uxtb	r0, r3
 80004fe:	e7db      	b.n	80004b8 <__aeabi_ui2f+0x28>
 8000500:	1f62      	subs	r2, r4, #5
 8000502:	4095      	lsls	r5, r2
 8000504:	0029      	movs	r1, r5
 8000506:	4e02      	ldr	r6, [pc, #8]	; (8000510 <__aeabi_ui2f+0x80>)
 8000508:	4031      	ands	r1, r6
 800050a:	076a      	lsls	r2, r5, #29
 800050c:	d0f4      	beq.n	80004f8 <__aeabi_ui2f+0x68>
 800050e:	e7e9      	b.n	80004e4 <__aeabi_ui2f+0x54>
 8000510:	fbffffff 	.word	0xfbffffff

08000514 <__clzsi2>:
 8000514:	211c      	movs	r1, #28
 8000516:	2301      	movs	r3, #1
 8000518:	041b      	lsls	r3, r3, #16
 800051a:	4298      	cmp	r0, r3
 800051c:	d301      	bcc.n	8000522 <__clzsi2+0xe>
 800051e:	0c00      	lsrs	r0, r0, #16
 8000520:	3910      	subs	r1, #16
 8000522:	0a1b      	lsrs	r3, r3, #8
 8000524:	4298      	cmp	r0, r3
 8000526:	d301      	bcc.n	800052c <__clzsi2+0x18>
 8000528:	0a00      	lsrs	r0, r0, #8
 800052a:	3908      	subs	r1, #8
 800052c:	091b      	lsrs	r3, r3, #4
 800052e:	4298      	cmp	r0, r3
 8000530:	d301      	bcc.n	8000536 <__clzsi2+0x22>
 8000532:	0900      	lsrs	r0, r0, #4
 8000534:	3904      	subs	r1, #4
 8000536:	a202      	add	r2, pc, #8	; (adr r2, 8000540 <__clzsi2+0x2c>)
 8000538:	5c10      	ldrb	r0, [r2, r0]
 800053a:	1840      	adds	r0, r0, r1
 800053c:	4770      	bx	lr
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	02020304 	.word	0x02020304
 8000544:	01010101 	.word	0x01010101
	...

08000550 <trim_read>:
unsigned char dig_H1 , dig_H3;

signed char dig_H6;

void trim_read()
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08c      	sub	sp, #48	; 0x30
 8000554:	af04      	add	r7, sp, #16

	uint8_t trim_paras[32];

    //HAL_MEM_READ
    HAL_I2C_Mem_Read(&hi2c1, BME_addr, 0X88, 1, trim_paras, 25, 1000);
 8000556:	486c      	ldr	r0, [pc, #432]	; (8000708 <trim_read+0x1b8>)
 8000558:	23fa      	movs	r3, #250	; 0xfa
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	9302      	str	r3, [sp, #8]
 800055e:	2319      	movs	r3, #25
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	003b      	movs	r3, r7
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2301      	movs	r3, #1
 8000568:	2288      	movs	r2, #136	; 0x88
 800056a:	21ec      	movs	r1, #236	; 0xec
 800056c:	f001 fa86 	bl	8001a7c <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, BME_addr, 0XE1, 1, (uint8_t*)trim_paras+25, 7, 1000);
 8000570:	003b      	movs	r3, r7
 8000572:	3319      	adds	r3, #25
 8000574:	4864      	ldr	r0, [pc, #400]	; (8000708 <trim_read+0x1b8>)
 8000576:	22fa      	movs	r2, #250	; 0xfa
 8000578:	0092      	lsls	r2, r2, #2
 800057a:	9202      	str	r2, [sp, #8]
 800057c:	2207      	movs	r2, #7
 800057e:	9201      	str	r2, [sp, #4]
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2301      	movs	r3, #1
 8000584:	22e1      	movs	r2, #225	; 0xe1
 8000586:	21ec      	movs	r1, #236	; 0xec
 8000588:	f001 fa78 	bl	8001a7c <HAL_I2C_Mem_Read>
    //extract from mem address and store in paras variable defined above

    dig_T1 = trim_paras[1]<<8 | trim_paras[0];
 800058c:	003b      	movs	r3, r7
 800058e:	785b      	ldrb	r3, [r3, #1]
 8000590:	021b      	lsls	r3, r3, #8
 8000592:	b21a      	sxth	r2, r3
 8000594:	003b      	movs	r3, r7
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	b21b      	sxth	r3, r3
 800059a:	4313      	orrs	r3, r2
 800059c:	b21b      	sxth	r3, r3
 800059e:	b29a      	uxth	r2, r3
 80005a0:	4b5a      	ldr	r3, [pc, #360]	; (800070c <trim_read+0x1bc>)
 80005a2:	801a      	strh	r2, [r3, #0]
    dig_T2 = trim_paras[3]<<8 | trim_paras[2];
 80005a4:	003b      	movs	r3, r7
 80005a6:	78db      	ldrb	r3, [r3, #3]
 80005a8:	021b      	lsls	r3, r3, #8
 80005aa:	b21a      	sxth	r2, r3
 80005ac:	003b      	movs	r3, r7
 80005ae:	789b      	ldrb	r3, [r3, #2]
 80005b0:	b21b      	sxth	r3, r3
 80005b2:	4313      	orrs	r3, r2
 80005b4:	b21a      	sxth	r2, r3
 80005b6:	4b56      	ldr	r3, [pc, #344]	; (8000710 <trim_read+0x1c0>)
 80005b8:	801a      	strh	r2, [r3, #0]
    dig_T3 = trim_paras[5]<<8 | trim_paras[4];
 80005ba:	003b      	movs	r3, r7
 80005bc:	795b      	ldrb	r3, [r3, #5]
 80005be:	021b      	lsls	r3, r3, #8
 80005c0:	b21a      	sxth	r2, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	791b      	ldrb	r3, [r3, #4]
 80005c6:	b21b      	sxth	r3, r3
 80005c8:	4313      	orrs	r3, r2
 80005ca:	b21a      	sxth	r2, r3
 80005cc:	4b51      	ldr	r3, [pc, #324]	; (8000714 <trim_read+0x1c4>)
 80005ce:	801a      	strh	r2, [r3, #0]
    dig_P1 = trim_paras[7]<<8 | trim_paras[6];
 80005d0:	003b      	movs	r3, r7
 80005d2:	79db      	ldrb	r3, [r3, #7]
 80005d4:	021b      	lsls	r3, r3, #8
 80005d6:	b21a      	sxth	r2, r3
 80005d8:	003b      	movs	r3, r7
 80005da:	799b      	ldrb	r3, [r3, #6]
 80005dc:	b21b      	sxth	r3, r3
 80005de:	4313      	orrs	r3, r2
 80005e0:	b21b      	sxth	r3, r3
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	4b4c      	ldr	r3, [pc, #304]	; (8000718 <trim_read+0x1c8>)
 80005e6:	801a      	strh	r2, [r3, #0]
    dig_P2 = trim_paras[9]<<8 | trim_paras[8];
 80005e8:	003b      	movs	r3, r7
 80005ea:	7a5b      	ldrb	r3, [r3, #9]
 80005ec:	021b      	lsls	r3, r3, #8
 80005ee:	b21a      	sxth	r2, r3
 80005f0:	003b      	movs	r3, r7
 80005f2:	7a1b      	ldrb	r3, [r3, #8]
 80005f4:	b21b      	sxth	r3, r3
 80005f6:	4313      	orrs	r3, r2
 80005f8:	b21a      	sxth	r2, r3
 80005fa:	4b48      	ldr	r3, [pc, #288]	; (800071c <trim_read+0x1cc>)
 80005fc:	801a      	strh	r2, [r3, #0]
    dig_P3 = trim_paras[11]<<8 | trim_paras[10];
 80005fe:	003b      	movs	r3, r7
 8000600:	7adb      	ldrb	r3, [r3, #11]
 8000602:	021b      	lsls	r3, r3, #8
 8000604:	b21a      	sxth	r2, r3
 8000606:	003b      	movs	r3, r7
 8000608:	7a9b      	ldrb	r3, [r3, #10]
 800060a:	b21b      	sxth	r3, r3
 800060c:	4313      	orrs	r3, r2
 800060e:	b21a      	sxth	r2, r3
 8000610:	4b43      	ldr	r3, [pc, #268]	; (8000720 <trim_read+0x1d0>)
 8000612:	801a      	strh	r2, [r3, #0]
    dig_P4 = trim_paras[13]<<8 | trim_paras[12];
 8000614:	003b      	movs	r3, r7
 8000616:	7b5b      	ldrb	r3, [r3, #13]
 8000618:	021b      	lsls	r3, r3, #8
 800061a:	b21a      	sxth	r2, r3
 800061c:	003b      	movs	r3, r7
 800061e:	7b1b      	ldrb	r3, [r3, #12]
 8000620:	b21b      	sxth	r3, r3
 8000622:	4313      	orrs	r3, r2
 8000624:	b21a      	sxth	r2, r3
 8000626:	4b3f      	ldr	r3, [pc, #252]	; (8000724 <trim_read+0x1d4>)
 8000628:	801a      	strh	r2, [r3, #0]
    dig_P5 = trim_paras[15]<<8 | trim_paras[14];
 800062a:	003b      	movs	r3, r7
 800062c:	7bdb      	ldrb	r3, [r3, #15]
 800062e:	021b      	lsls	r3, r3, #8
 8000630:	b21a      	sxth	r2, r3
 8000632:	003b      	movs	r3, r7
 8000634:	7b9b      	ldrb	r3, [r3, #14]
 8000636:	b21b      	sxth	r3, r3
 8000638:	4313      	orrs	r3, r2
 800063a:	b21a      	sxth	r2, r3
 800063c:	4b3a      	ldr	r3, [pc, #232]	; (8000728 <trim_read+0x1d8>)
 800063e:	801a      	strh	r2, [r3, #0]
    dig_P6 = trim_paras[17]<<8 | trim_paras[16];
 8000640:	003b      	movs	r3, r7
 8000642:	7c5b      	ldrb	r3, [r3, #17]
 8000644:	021b      	lsls	r3, r3, #8
 8000646:	b21a      	sxth	r2, r3
 8000648:	003b      	movs	r3, r7
 800064a:	7c1b      	ldrb	r3, [r3, #16]
 800064c:	b21b      	sxth	r3, r3
 800064e:	4313      	orrs	r3, r2
 8000650:	b21a      	sxth	r2, r3
 8000652:	4b36      	ldr	r3, [pc, #216]	; (800072c <trim_read+0x1dc>)
 8000654:	801a      	strh	r2, [r3, #0]
    dig_P7 = trim_paras[19]<<8 | trim_paras[18];
 8000656:	003b      	movs	r3, r7
 8000658:	7cdb      	ldrb	r3, [r3, #19]
 800065a:	021b      	lsls	r3, r3, #8
 800065c:	b21a      	sxth	r2, r3
 800065e:	003b      	movs	r3, r7
 8000660:	7c9b      	ldrb	r3, [r3, #18]
 8000662:	b21b      	sxth	r3, r3
 8000664:	4313      	orrs	r3, r2
 8000666:	b21a      	sxth	r2, r3
 8000668:	4b31      	ldr	r3, [pc, #196]	; (8000730 <trim_read+0x1e0>)
 800066a:	801a      	strh	r2, [r3, #0]
    dig_P8 = trim_paras[21]<<8 | trim_paras[20];
 800066c:	003b      	movs	r3, r7
 800066e:	7d5b      	ldrb	r3, [r3, #21]
 8000670:	021b      	lsls	r3, r3, #8
 8000672:	b21a      	sxth	r2, r3
 8000674:	003b      	movs	r3, r7
 8000676:	7d1b      	ldrb	r3, [r3, #20]
 8000678:	b21b      	sxth	r3, r3
 800067a:	4313      	orrs	r3, r2
 800067c:	b21a      	sxth	r2, r3
 800067e:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <trim_read+0x1e4>)
 8000680:	801a      	strh	r2, [r3, #0]
    dig_P9 = trim_paras[23]<<8 | trim_paras[22];
 8000682:	003b      	movs	r3, r7
 8000684:	7ddb      	ldrb	r3, [r3, #23]
 8000686:	021b      	lsls	r3, r3, #8
 8000688:	b21a      	sxth	r2, r3
 800068a:	003b      	movs	r3, r7
 800068c:	7d9b      	ldrb	r3, [r3, #22]
 800068e:	b21b      	sxth	r3, r3
 8000690:	4313      	orrs	r3, r2
 8000692:	b21a      	sxth	r2, r3
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <trim_read+0x1e8>)
 8000696:	801a      	strh	r2, [r3, #0]
    dig_H1 = trim_paras[24];
 8000698:	003b      	movs	r3, r7
 800069a:	7e1a      	ldrb	r2, [r3, #24]
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <trim_read+0x1ec>)
 800069e:	701a      	strb	r2, [r3, #0]
    dig_H2 = trim_paras[26]<<8 | trim_paras[25];
 80006a0:	003b      	movs	r3, r7
 80006a2:	7e9b      	ldrb	r3, [r3, #26]
 80006a4:	021b      	lsls	r3, r3, #8
 80006a6:	b21a      	sxth	r2, r3
 80006a8:	003b      	movs	r3, r7
 80006aa:	7e5b      	ldrb	r3, [r3, #25]
 80006ac:	b21b      	sxth	r3, r3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	b21a      	sxth	r2, r3
 80006b2:	4b23      	ldr	r3, [pc, #140]	; (8000740 <trim_read+0x1f0>)
 80006b4:	801a      	strh	r2, [r3, #0]
    dig_H3 = trim_paras[27];
 80006b6:	003b      	movs	r3, r7
 80006b8:	7eda      	ldrb	r2, [r3, #27]
 80006ba:	4b22      	ldr	r3, [pc, #136]	; (8000744 <trim_read+0x1f4>)
 80006bc:	701a      	strb	r2, [r3, #0]
    dig_H4 = trim_paras[28]<<4 | (trim_paras[29]&0x0F);
 80006be:	003b      	movs	r3, r7
 80006c0:	7f1b      	ldrb	r3, [r3, #28]
 80006c2:	011b      	lsls	r3, r3, #4
 80006c4:	b21a      	sxth	r2, r3
 80006c6:	003b      	movs	r3, r7
 80006c8:	7f5b      	ldrb	r3, [r3, #29]
 80006ca:	b21b      	sxth	r3, r3
 80006cc:	210f      	movs	r1, #15
 80006ce:	400b      	ands	r3, r1
 80006d0:	b21b      	sxth	r3, r3
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b21a      	sxth	r2, r3
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <trim_read+0x1f8>)
 80006d8:	801a      	strh	r2, [r3, #0]
    dig_H5 = (trim_paras[29]& 0xF0)>>4 | trim_paras[30]<<4 ;
 80006da:	003b      	movs	r3, r7
 80006dc:	7f5b      	ldrb	r3, [r3, #29]
 80006de:	091b      	lsrs	r3, r3, #4
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	b21a      	sxth	r2, r3
 80006e4:	003b      	movs	r3, r7
 80006e6:	7f9b      	ldrb	r3, [r3, #30]
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	4313      	orrs	r3, r2
 80006ee:	b21a      	sxth	r2, r3
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <trim_read+0x1fc>)
 80006f2:	801a      	strh	r2, [r3, #0]
    dig_H6 = trim_paras[31];
 80006f4:	003b      	movs	r3, r7
 80006f6:	7fdb      	ldrb	r3, [r3, #31]
 80006f8:	b25a      	sxtb	r2, r3
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <trim_read+0x200>)
 80006fc:	701a      	strb	r2, [r3, #0]


}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b008      	add	sp, #32
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	2000005c 	.word	0x2000005c
 800070c:	2000002c 	.word	0x2000002c
 8000710:	20000030 	.word	0x20000030
 8000714:	20000032 	.word	0x20000032
 8000718:	2000002e 	.word	0x2000002e
 800071c:	20000034 	.word	0x20000034
 8000720:	20000036 	.word	0x20000036
 8000724:	20000038 	.word	0x20000038
 8000728:	2000003a 	.word	0x2000003a
 800072c:	2000003c 	.word	0x2000003c
 8000730:	2000003e 	.word	0x2000003e
 8000734:	20000040 	.word	0x20000040
 8000738:	20000042 	.word	0x20000042
 800073c:	2000004a 	.word	0x2000004a
 8000740:	20000044 	.word	0x20000044
 8000744:	2000004b 	.word	0x2000004b
 8000748:	20000046 	.word	0x20000046
 800074c:	20000048 	.word	0x20000048
 8000750:	2000004c 	.word	0x2000004c

08000754 <BME_Config>:


void BME_Config(uint8_t osrs_p, uint8_t osrs_t,uint8_t osrs_h,uint8_t mode, uint8_t filter , uint8_t standby)
{
 8000754:	b5b0      	push	{r4, r5, r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af04      	add	r7, sp, #16
 800075a:	0005      	movs	r5, r0
 800075c:	000c      	movs	r4, r1
 800075e:	0010      	movs	r0, r2
 8000760:	0019      	movs	r1, r3
 8000762:	1dfb      	adds	r3, r7, #7
 8000764:	1c2a      	adds	r2, r5, #0
 8000766:	701a      	strb	r2, [r3, #0]
 8000768:	1dbb      	adds	r3, r7, #6
 800076a:	1c22      	adds	r2, r4, #0
 800076c:	701a      	strb	r2, [r3, #0]
 800076e:	1d7b      	adds	r3, r7, #5
 8000770:	1c02      	adds	r2, r0, #0
 8000772:	701a      	strb	r2, [r3, #0]
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	1c0a      	adds	r2, r1, #0
 8000778:	701a      	strb	r2, [r3, #0]
	//reset
    uint8_t writ = 0xB6;
 800077a:	210f      	movs	r1, #15
 800077c:	187b      	adds	r3, r7, r1
 800077e:	22b6      	movs	r2, #182	; 0xb6
 8000780:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Mem_Write(&hi2c1, BME_addr, RESET, 1, &writ, 1, 1000)== HAL_OK)
 8000782:	484d      	ldr	r0, [pc, #308]	; (80008b8 <BME_Config+0x164>)
 8000784:	23fa      	movs	r3, #250	; 0xfa
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	9302      	str	r3, [sp, #8]
 800078a:	2301      	movs	r3, #1
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	000c      	movs	r4, r1
 8000790:	187b      	adds	r3, r7, r1
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	2301      	movs	r3, #1
 8000796:	22e0      	movs	r2, #224	; 0xe0
 8000798:	21ec      	movs	r1, #236	; 0xec
 800079a:	f001 f841 	bl	8001820 <HAL_I2C_Mem_Write>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d102      	bne.n	80007a8 <BME_Config+0x54>
    {
    	writ = 0x0c;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	220c      	movs	r2, #12
 80007a6:	701a      	strb	r2, [r3, #0]
    }



    uint8_t temp_conf= 0 ;
 80007a8:	210e      	movs	r1, #14
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
    temp_conf |= standby<<5|filter<<2;
 80007b0:	2324      	movs	r3, #36	; 0x24
 80007b2:	18fb      	adds	r3, r7, r3
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	015b      	lsls	r3, r3, #5
 80007b8:	b25a      	sxtb	r2, r3
 80007ba:	2320      	movs	r3, #32
 80007bc:	18fb      	adds	r3, r7, r3
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	b25b      	sxtb	r3, r3
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b25a      	sxtb	r2, r3
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	4313      	orrs	r3, r2
 80007d0:	b25b      	sxtb	r3, r3
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	701a      	strb	r2, [r3, #0]
    uint8_t check;
    //halwrite to conf register
    HAL_I2C_Mem_Write(&hi2c1, BME_addr, CONFIG, 1, &temp_conf, 1, 1000);
 80007d8:	4837      	ldr	r0, [pc, #220]	; (80008b8 <BME_Config+0x164>)
 80007da:	23fa      	movs	r3, #250	; 0xfa
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	9302      	str	r3, [sp, #8]
 80007e0:	2301      	movs	r3, #1
 80007e2:	9301      	str	r3, [sp, #4]
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	2301      	movs	r3, #1
 80007ea:	22f5      	movs	r2, #245	; 0xf5
 80007ec:	21ec      	movs	r1, #236	; 0xec
 80007ee:	f001 f817 	bl	8001820 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 80007f2:	2064      	movs	r0, #100	; 0x64
 80007f4:	f000 fd18 	bl	8001228 <HAL_Delay>
    uint8_t hum =0;
 80007f8:	210c      	movs	r1, #12
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
    hum |= osrs_h ;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	781a      	ldrb	r2, [r3, #0]
 8000804:	1d7b      	adds	r3, r7, #5
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4313      	orrs	r3, r2
 800080a:	b2da      	uxtb	r2, r3
 800080c:	187b      	adds	r3, r7, r1
 800080e:	701a      	strb	r2, [r3, #0]

    uint8_t meas=0;
 8000810:	200b      	movs	r0, #11
 8000812:	183b      	adds	r3, r7, r0
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
    meas |= osrs_t << 5 |osrs_p<<2| mode;
 8000818:	1dbb      	adds	r3, r7, #6
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	015b      	lsls	r3, r3, #5
 800081e:	b25a      	sxtb	r2, r3
 8000820:	1dfb      	adds	r3, r7, #7
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	b25b      	sxtb	r3, r3
 8000828:	4313      	orrs	r3, r2
 800082a:	b25a      	sxtb	r2, r3
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	b25b      	sxtb	r3, r3
 8000832:	4313      	orrs	r3, r2
 8000834:	b25a      	sxtb	r2, r3
 8000836:	183b      	adds	r3, r7, r0
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	b25b      	sxtb	r3, r3
 800083c:	4313      	orrs	r3, r2
 800083e:	b25b      	sxtb	r3, r3
 8000840:	b2da      	uxtb	r2, r3
 8000842:	0004      	movs	r4, r0
 8000844:	183b      	adds	r3, r7, r0
 8000846:	701a      	strb	r2, [r3, #0]

    //hal write to ctrl_hum
    HAL_I2C_Mem_Write(&hi2c1, BME_addr, CTRL_HUM, 1, &hum, 1, 1000);
 8000848:	481b      	ldr	r0, [pc, #108]	; (80008b8 <BME_Config+0x164>)
 800084a:	23fa      	movs	r3, #250	; 0xfa
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	9302      	str	r3, [sp, #8]
 8000850:	2301      	movs	r3, #1
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	187b      	adds	r3, r7, r1
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	2301      	movs	r3, #1
 800085a:	22f2      	movs	r2, #242	; 0xf2
 800085c:	21ec      	movs	r1, #236	; 0xec
 800085e:	f000 ffdf 	bl	8001820 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8000862:	2064      	movs	r0, #100	; 0x64
 8000864:	f000 fce0 	bl	8001228 <HAL_Delay>
    //hal write to ctrl_meas
    HAL_I2C_Mem_Write(&hi2c1, BME_addr, CTRL_MEAS, 1, &meas, 1, 1000);
 8000868:	4813      	ldr	r0, [pc, #76]	; (80008b8 <BME_Config+0x164>)
 800086a:	23fa      	movs	r3, #250	; 0xfa
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	9302      	str	r3, [sp, #8]
 8000870:	2301      	movs	r3, #1
 8000872:	9301      	str	r3, [sp, #4]
 8000874:	193b      	adds	r3, r7, r4
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	2301      	movs	r3, #1
 800087a:	22f4      	movs	r2, #244	; 0xf4
 800087c:	21ec      	movs	r1, #236	; 0xec
 800087e:	f000 ffcf 	bl	8001820 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8000882:	2064      	movs	r0, #100	; 0x64
 8000884:	f000 fcd0 	bl	8001228 <HAL_Delay>
    HAL_I2C_Mem_Read(&hi2c1, BME_addr, CTRL_MEAS, 1, &check, 1, 1000);
 8000888:	480b      	ldr	r0, [pc, #44]	; (80008b8 <BME_Config+0x164>)
 800088a:	23fa      	movs	r3, #250	; 0xfa
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	9302      	str	r3, [sp, #8]
 8000890:	2301      	movs	r3, #1
 8000892:	9301      	str	r3, [sp, #4]
 8000894:	230d      	movs	r3, #13
 8000896:	18fb      	adds	r3, r7, r3
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	2301      	movs	r3, #1
 800089c:	22f4      	movs	r2, #244	; 0xf4
 800089e:	21ec      	movs	r1, #236	; 0xec
 80008a0:	f001 f8ec 	bl	8001a7c <HAL_I2C_Mem_Read>
    HAL_Delay(100);
 80008a4:	2064      	movs	r0, #100	; 0x64
 80008a6:	f000 fcbf 	bl	8001228 <HAL_Delay>
    trim_read();
 80008aa:	f7ff fe51 	bl	8000550 <trim_read>
}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b004      	add	sp, #16
 80008b4:	bdb0      	pop	{r4, r5, r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	2000005c 	.word	0x2000005c

080008bc <Measure>:



void Measure()
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af04      	add	r7, sp, #16
    int32_t pres_raw, humidity_raw, temp_raw;

    uint8_t raw_read[3];

    //hal read mem from addres F7 to 3 byte for pressure
    HAL_I2C_Mem_Read(&hi2c1, BME_addr, 0xF7, 1, raw_read, 3, 1000);
 80008c2:	4839      	ldr	r0, [pc, #228]	; (80009a8 <Measure+0xec>)
 80008c4:	23fa      	movs	r3, #250	; 0xfa
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	9302      	str	r3, [sp, #8]
 80008ca:	2303      	movs	r3, #3
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	003b      	movs	r3, r7
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	2301      	movs	r3, #1
 80008d4:	22f7      	movs	r2, #247	; 0xf7
 80008d6:	21ec      	movs	r1, #236	; 0xec
 80008d8:	f001 f8d0 	bl	8001a7c <HAL_I2C_Mem_Read>
    pres_raw = raw_read[0]<<12 | raw_read[1]<<4 | (raw_read[2]&0xf0 )>>4;
 80008dc:	003b      	movs	r3, r7
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	031a      	lsls	r2, r3, #12
 80008e2:	003b      	movs	r3, r7
 80008e4:	785b      	ldrb	r3, [r3, #1]
 80008e6:	011b      	lsls	r3, r3, #4
 80008e8:	4313      	orrs	r3, r2
 80008ea:	003a      	movs	r2, r7
 80008ec:	7892      	ldrb	r2, [r2, #2]
 80008ee:	0912      	lsrs	r2, r2, #4
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	4313      	orrs	r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]


    // hal_Read from mem add FA to 3 byte for temp
    HAL_I2C_Mem_Read(&hi2c1, BME_addr, 0xFA, 1, raw_read, 3, 1000);
 80008f6:	482c      	ldr	r0, [pc, #176]	; (80009a8 <Measure+0xec>)
 80008f8:	23fa      	movs	r3, #250	; 0xfa
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	9302      	str	r3, [sp, #8]
 80008fe:	2303      	movs	r3, #3
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	003b      	movs	r3, r7
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2301      	movs	r3, #1
 8000908:	22fa      	movs	r2, #250	; 0xfa
 800090a:	21ec      	movs	r1, #236	; 0xec
 800090c:	f001 f8b6 	bl	8001a7c <HAL_I2C_Mem_Read>
    temp_raw = raw_read[0]<<12 | raw_read[1]<<4 | (raw_read[2]&0xf0 )>>4;
 8000910:	003b      	movs	r3, r7
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	031a      	lsls	r2, r3, #12
 8000916:	003b      	movs	r3, r7
 8000918:	785b      	ldrb	r3, [r3, #1]
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	4313      	orrs	r3, r2
 800091e:	003a      	movs	r2, r7
 8000920:	7892      	ldrb	r2, [r2, #2]
 8000922:	0912      	lsrs	r2, r2, #4
 8000924:	b2d2      	uxtb	r2, r2
 8000926:	4313      	orrs	r3, r2
 8000928:	60bb      	str	r3, [r7, #8]

    //hal read from mem add FD to 2 byte
    HAL_I2C_Mem_Read(&hi2c1, BME_addr, 0xFD, 1, raw_read, 2, 1000);
 800092a:	481f      	ldr	r0, [pc, #124]	; (80009a8 <Measure+0xec>)
 800092c:	23fa      	movs	r3, #250	; 0xfa
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	9302      	str	r3, [sp, #8]
 8000932:	2302      	movs	r3, #2
 8000934:	9301      	str	r3, [sp, #4]
 8000936:	003b      	movs	r3, r7
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2301      	movs	r3, #1
 800093c:	22fd      	movs	r2, #253	; 0xfd
 800093e:	21ec      	movs	r1, #236	; 0xec
 8000940:	f001 f89c 	bl	8001a7c <HAL_I2C_Mem_Read>
    humidity_raw = raw_read[0]<<8 | (raw_read[1] );
 8000944:	003b      	movs	r3, r7
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	021b      	lsls	r3, r3, #8
 800094a:	003a      	movs	r2, r7
 800094c:	7852      	ldrb	r2, [r2, #1]
 800094e:	4313      	orrs	r3, r2
 8000950:	607b      	str	r3, [r7, #4]

    Temperature = BME280_compensate_T_int32(temp_raw)/100;
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	0018      	movs	r0, r3
 8000956:	f000 f82f 	bl	80009b8 <BME280_compensate_T_int32>
 800095a:	0003      	movs	r3, r0
 800095c:	2164      	movs	r1, #100	; 0x64
 800095e:	0018      	movs	r0, r3
 8000960:	f7ff fc5c 	bl	800021c <__divsi3>
 8000964:	0003      	movs	r3, r0
 8000966:	0018      	movs	r0, r3
 8000968:	f7ff fd44 	bl	80003f4 <__aeabi_i2f>
 800096c:	1c02      	adds	r2, r0, #0
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <Measure+0xf0>)
 8000970:	601a      	str	r2, [r3, #0]
    Pressure =  BME280_compensate_P_int32(pres_raw);
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	0018      	movs	r0, r3
 8000976:	f000 f8cb 	bl	8000b10 <BME280_compensate_P_int32>
 800097a:	0003      	movs	r3, r0
 800097c:	0018      	movs	r0, r3
 800097e:	f7ff fd87 	bl	8000490 <__aeabi_ui2f>
 8000982:	1c02      	adds	r2, r0, #0
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <Measure+0xf4>)
 8000986:	601a      	str	r2, [r3, #0]
    Humidity = bme280_compensate_H_int32(humidity_raw)/1024;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	0018      	movs	r0, r3
 800098c:	f000 f850 	bl	8000a30 <bme280_compensate_H_int32>
 8000990:	0003      	movs	r3, r0
 8000992:	0a9b      	lsrs	r3, r3, #10
 8000994:	0018      	movs	r0, r3
 8000996:	f7ff fd7b 	bl	8000490 <__aeabi_ui2f>
 800099a:	1c02      	adds	r2, r0, #0
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <Measure+0xf8>)
 800099e:	601a      	str	r2, [r3, #0]

}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b004      	add	sp, #16
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000005c 	.word	0x2000005c
 80009ac:	20000050 	.word	0x20000050
 80009b0:	20000054 	.word	0x20000054
 80009b4:	20000058 	.word	0x20000058

080009b8 <BME280_compensate_T_int32>:


//calibration code

BME280_S32_t BME280_compensate_T_int32(BME280_S32_t adc_T)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
    BME280_S32_t var1, var2, T;
    var1 = ((((adc_T>>3) - ((BME280_S32_t)dig_T1<<1))) * ((BME280_S32_t)dig_T2)) >> 11;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	10da      	asrs	r2, r3, #3
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <BME280_compensate_T_int32+0x68>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <BME280_compensate_T_int32+0x6c>)
 80009ce:	2100      	movs	r1, #0
 80009d0:	5e52      	ldrsh	r2, [r2, r1]
 80009d2:	4353      	muls	r3, r2
 80009d4:	12db      	asrs	r3, r3, #11
 80009d6:	617b      	str	r3, [r7, #20]
    var2 = (((((adc_T>>4) - ((BME280_S32_t)dig_T1)) * ((adc_T>>4) - ((BME280_S32_t)dig_T1))) >> 12) * ((BME280_S32_t)dig_T3)) >> 14;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	111b      	asrs	r3, r3, #4
 80009dc:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <BME280_compensate_T_int32+0x68>)
 80009de:	8812      	ldrh	r2, [r2, #0]
 80009e0:	1a9b      	subs	r3, r3, r2
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	1112      	asrs	r2, r2, #4
 80009e6:	490e      	ldr	r1, [pc, #56]	; (8000a20 <BME280_compensate_T_int32+0x68>)
 80009e8:	8809      	ldrh	r1, [r1, #0]
 80009ea:	1a52      	subs	r2, r2, r1
 80009ec:	4353      	muls	r3, r2
 80009ee:	131b      	asrs	r3, r3, #12
 80009f0:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <BME280_compensate_T_int32+0x70>)
 80009f2:	2100      	movs	r1, #0
 80009f4:	5e52      	ldrsh	r2, [r2, r1]
 80009f6:	4353      	muls	r3, r2
 80009f8:	139b      	asrs	r3, r3, #14
 80009fa:	613b      	str	r3, [r7, #16]
    t_fine = var1 + var2;
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	18d2      	adds	r2, r2, r3
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <BME280_compensate_T_int32+0x74>)
 8000a04:	601a      	str	r2, [r3, #0]
    T = (t_fine * 5 + 128) >> 8;
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <BME280_compensate_T_int32+0x74>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	0013      	movs	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	189b      	adds	r3, r3, r2
 8000a10:	3380      	adds	r3, #128	; 0x80
 8000a12:	121b      	asrs	r3, r3, #8
 8000a14:	60fb      	str	r3, [r7, #12]
    return T;
 8000a16:	68fb      	ldr	r3, [r7, #12]
}
 8000a18:	0018      	movs	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b006      	add	sp, #24
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000002c 	.word	0x2000002c
 8000a24:	20000030 	.word	0x20000030
 8000a28:	20000032 	.word	0x20000032
 8000a2c:	20000028 	.word	0x20000028

08000a30 <bme280_compensate_H_int32>:


BME280_U32_t bme280_compensate_H_int32(BME280_S32_t adc_H)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
    BME280_S32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((BME280_S32_t)76800));
 8000a38:	4b2d      	ldr	r3, [pc, #180]	; (8000af0 <bme280_compensate_H_int32+0xc0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a2d      	ldr	r2, [pc, #180]	; (8000af4 <bme280_compensate_H_int32+0xc4>)
 8000a3e:	4694      	mov	ip, r2
 8000a40:	4463      	add	r3, ip
 8000a42:	60fb      	str	r3, [r7, #12]
    v_x1_u32r = (((((adc_H << 14) - (((BME280_S32_t)dig_H4) << 20) - (((BME280_S32_t)dig_H5) *\
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	039a      	lsls	r2, r3, #14
 8000a48:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <bme280_compensate_H_int32+0xc8>)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	5e5b      	ldrsh	r3, [r3, r1]
 8000a4e:	051b      	lsls	r3, r3, #20
 8000a50:	1ad2      	subs	r2, r2, r3
 8000a52:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <bme280_compensate_H_int32+0xcc>)
 8000a54:	2100      	movs	r1, #0
 8000a56:	5e5b      	ldrsh	r3, [r3, r1]
 8000a58:	0019      	movs	r1, r3
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	434b      	muls	r3, r1
 8000a5e:	1ad3      	subs	r3, r2, r3
                    v_x1_u32r)) + ((BME280_S32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8000a60:	2280      	movs	r2, #128	; 0x80
 8000a62:	01d2      	lsls	r2, r2, #7
 8000a64:	4694      	mov	ip, r2
 8000a66:	4463      	add	r3, ip
 8000a68:	13db      	asrs	r3, r3, #15
                        ((BME280_S32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((BME280_S32_t)dig_H3)) >> 11) +\
 8000a6a:	4a25      	ldr	r2, [pc, #148]	; (8000b00 <bme280_compensate_H_int32+0xd0>)
 8000a6c:	7812      	ldrb	r2, [r2, #0]
 8000a6e:	b252      	sxtb	r2, r2
 8000a70:	0011      	movs	r1, r2
                    v_x1_u32r)) + ((BME280_S32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	434a      	muls	r2, r1
                        ((BME280_S32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((BME280_S32_t)dig_H3)) >> 11) +\
 8000a76:	1292      	asrs	r2, r2, #10
 8000a78:	4922      	ldr	r1, [pc, #136]	; (8000b04 <bme280_compensate_H_int32+0xd4>)
 8000a7a:	7809      	ldrb	r1, [r1, #0]
 8000a7c:	0008      	movs	r0, r1
 8000a7e:	68f9      	ldr	r1, [r7, #12]
 8000a80:	4341      	muls	r1, r0
 8000a82:	12c9      	asrs	r1, r1, #11
 8000a84:	2080      	movs	r0, #128	; 0x80
 8000a86:	0200      	lsls	r0, r0, #8
 8000a88:	4684      	mov	ip, r0
 8000a8a:	4461      	add	r1, ip
 8000a8c:	434a      	muls	r2, r1
                        ((BME280_S32_t)32768))) >> 10) + ((BME280_S32_t)2097152)) * ((BME280_S32_t)dig_H2) + 8192) >> 14));
 8000a8e:	1292      	asrs	r2, r2, #10
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	0389      	lsls	r1, r1, #14
 8000a94:	468c      	mov	ip, r1
 8000a96:	4462      	add	r2, ip
 8000a98:	491b      	ldr	r1, [pc, #108]	; (8000b08 <bme280_compensate_H_int32+0xd8>)
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	5e09      	ldrsh	r1, [r1, r0]
 8000a9e:	434a      	muls	r2, r1
 8000aa0:	2180      	movs	r1, #128	; 0x80
 8000aa2:	0189      	lsls	r1, r1, #6
 8000aa4:	468c      	mov	ip, r1
 8000aa6:	4462      	add	r2, ip
 8000aa8:	1392      	asrs	r2, r2, #14
    v_x1_u32r = (((((adc_H << 14) - (((BME280_S32_t)dig_H4) << 20) - (((BME280_S32_t)dig_H5) *\
 8000aaa:	4353      	muls	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((BME280_S32_t)dig_H1)) >> 4));
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	13db      	asrs	r3, r3, #15
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	13d2      	asrs	r2, r2, #15
 8000ab6:	4353      	muls	r3, r2
 8000ab8:	11db      	asrs	r3, r3, #7
 8000aba:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <bme280_compensate_H_int32+0xdc>)
 8000abc:	7812      	ldrb	r2, [r2, #0]
 8000abe:	4353      	muls	r3, r2
 8000ac0:	111b      	asrs	r3, r3, #4
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	60fb      	str	r3, [r7, #12]
    v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	da00      	bge.n	8000ad0 <bme280_compensate_H_int32+0xa0>
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
    v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	22c8      	movs	r2, #200	; 0xc8
 8000ad6:	0552      	lsls	r2, r2, #21
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	dd01      	ble.n	8000ae0 <bme280_compensate_H_int32+0xb0>
 8000adc:	23c8      	movs	r3, #200	; 0xc8
 8000ade:	055b      	lsls	r3, r3, #21
 8000ae0:	60fb      	str	r3, [r7, #12]

    return (BME280_U32_t)(v_x1_u32r>>12);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	131b      	asrs	r3, r3, #12
}
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b004      	add	sp, #16
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	20000028 	.word	0x20000028
 8000af4:	fffed400 	.word	0xfffed400
 8000af8:	20000046 	.word	0x20000046
 8000afc:	20000048 	.word	0x20000048
 8000b00:	2000004c 	.word	0x2000004c
 8000b04:	2000004b 	.word	0x2000004b
 8000b08:	20000044 	.word	0x20000044
 8000b0c:	2000004a 	.word	0x2000004a

08000b10 <BME280_compensate_P_int32>:

BME280_U32_t BME280_compensate_P_int32(BME280_S32_t adc_P)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
    BME280_S32_t var1, var2;
    BME280_U32_t p;
    var1 = (((BME280_S32_t)t_fine)>>1) - (BME280_S32_t)64000;
 8000b18:	4b4b      	ldr	r3, [pc, #300]	; (8000c48 <BME280_compensate_P_int32+0x138>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	105b      	asrs	r3, r3, #1
 8000b1e:	4a4b      	ldr	r2, [pc, #300]	; (8000c4c <BME280_compensate_P_int32+0x13c>)
 8000b20:	4694      	mov	ip, r2
 8000b22:	4463      	add	r3, ip
 8000b24:	613b      	str	r3, [r7, #16]
    var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((BME280_S32_t)dig_P6);
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	109b      	asrs	r3, r3, #2
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	1092      	asrs	r2, r2, #2
 8000b2e:	4353      	muls	r3, r2
 8000b30:	12db      	asrs	r3, r3, #11
 8000b32:	4a47      	ldr	r2, [pc, #284]	; (8000c50 <BME280_compensate_P_int32+0x140>)
 8000b34:	2100      	movs	r1, #0
 8000b36:	5e52      	ldrsh	r2, [r2, r1]
 8000b38:	4353      	muls	r3, r2
 8000b3a:	60fb      	str	r3, [r7, #12]
    var2 = var2 + ((var1*((BME280_S32_t)dig_P5))<<1);
 8000b3c:	4b45      	ldr	r3, [pc, #276]	; (8000c54 <BME280_compensate_P_int32+0x144>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	5e9b      	ldrsh	r3, [r3, r2]
 8000b42:	001a      	movs	r2, r3
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	4353      	muls	r3, r2
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	18d3      	adds	r3, r2, r3
 8000b4e:	60fb      	str	r3, [r7, #12]
    var2 = (var2>>2)+(((BME280_S32_t)dig_P4)<<16);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	109a      	asrs	r2, r3, #2
 8000b54:	4b40      	ldr	r3, [pc, #256]	; (8000c58 <BME280_compensate_P_int32+0x148>)
 8000b56:	2100      	movs	r1, #0
 8000b58:	5e5b      	ldrsh	r3, [r3, r1]
 8000b5a:	041b      	lsls	r3, r3, #16
 8000b5c:	18d3      	adds	r3, r2, r3
 8000b5e:	60fb      	str	r3, [r7, #12]
    var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((BME280_S32_t)dig_P2) * var1)>>1))>>18;
 8000b60:	4b3e      	ldr	r3, [pc, #248]	; (8000c5c <BME280_compensate_P_int32+0x14c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	5e9b      	ldrsh	r3, [r3, r2]
 8000b66:	0019      	movs	r1, r3
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	109b      	asrs	r3, r3, #2
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	1092      	asrs	r2, r2, #2
 8000b70:	4353      	muls	r3, r2
 8000b72:	135b      	asrs	r3, r3, #13
 8000b74:	434b      	muls	r3, r1
 8000b76:	10da      	asrs	r2, r3, #3
 8000b78:	4b39      	ldr	r3, [pc, #228]	; (8000c60 <BME280_compensate_P_int32+0x150>)
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	5e5b      	ldrsh	r3, [r3, r1]
 8000b7e:	0019      	movs	r1, r3
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	434b      	muls	r3, r1
 8000b84:	105b      	asrs	r3, r3, #1
 8000b86:	18d3      	adds	r3, r2, r3
 8000b88:	149b      	asrs	r3, r3, #18
 8000b8a:	613b      	str	r3, [r7, #16]
    var1 = ((((32768+var1))*((BME280_S32_t)dig_P1))>>15);
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	2280      	movs	r2, #128	; 0x80
 8000b90:	0212      	lsls	r2, r2, #8
 8000b92:	4694      	mov	ip, r2
 8000b94:	4463      	add	r3, ip
 8000b96:	4a33      	ldr	r2, [pc, #204]	; (8000c64 <BME280_compensate_P_int32+0x154>)
 8000b98:	8812      	ldrh	r2, [r2, #0]
 8000b9a:	4353      	muls	r3, r2
 8000b9c:	13db      	asrs	r3, r3, #15
 8000b9e:	613b      	str	r3, [r7, #16]
    if (var1 == 0)
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <BME280_compensate_P_int32+0x9a>
    {
        return 0; // avoid exception caused by division by zero
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e049      	b.n	8000c3e <BME280_compensate_P_int32+0x12e>
    }
    p = (((BME280_U32_t)(((BME280_S32_t)1048576)-adc_P)-(var2>>12)))*3125;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	131b      	asrs	r3, r3, #12
 8000bae:	001a      	movs	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	18d2      	adds	r2, r2, r3
 8000bb4:	0013      	movs	r3, r2
 8000bb6:	015b      	lsls	r3, r3, #5
 8000bb8:	1a9b      	subs	r3, r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	189b      	adds	r3, r3, r2
 8000bbe:	009a      	lsls	r2, r3, #2
 8000bc0:	189b      	adds	r3, r3, r2
 8000bc2:	009a      	lsls	r2, r3, #2
 8000bc4:	189b      	adds	r3, r3, r2
 8000bc6:	425b      	negs	r3, r3
 8000bc8:	4a27      	ldr	r2, [pc, #156]	; (8000c68 <BME280_compensate_P_int32+0x158>)
 8000bca:	4694      	mov	ip, r2
 8000bcc:	4463      	add	r3, ip
 8000bce:	617b      	str	r3, [r7, #20]
    if (p < 0x80000000)
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	db09      	blt.n	8000bea <BME280_compensate_P_int32+0xda>
    {
        p = (p << 1) / ((BME280_U32_t)var1);
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	0011      	movs	r1, r2
 8000bde:	0018      	movs	r0, r3
 8000be0:	f7ff fa92 	bl	8000108 <__udivsi3>
 8000be4:	0003      	movs	r3, r0
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	e007      	b.n	8000bfa <BME280_compensate_P_int32+0xea>
    }
    else
    {
        p = (p / (BME280_U32_t)var1) * 2;
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	0019      	movs	r1, r3
 8000bee:	6978      	ldr	r0, [r7, #20]
 8000bf0:	f7ff fa8a 	bl	8000108 <__udivsi3>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	617b      	str	r3, [r7, #20]
    }
    var1 = (((BME280_S32_t)dig_P9) * ((BME280_S32_t)(((p>>3) * (p>>3))>>13)))>>12;
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <BME280_compensate_P_int32+0x15c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	5e9b      	ldrsh	r3, [r3, r2]
 8000c00:	0019      	movs	r1, r3
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	08db      	lsrs	r3, r3, #3
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	08d2      	lsrs	r2, r2, #3
 8000c0a:	4353      	muls	r3, r2
 8000c0c:	0b5b      	lsrs	r3, r3, #13
 8000c0e:	434b      	muls	r3, r1
 8000c10:	131b      	asrs	r3, r3, #12
 8000c12:	613b      	str	r3, [r7, #16]
    var2 = (((BME280_S32_t)(p>>2)) * ((BME280_S32_t)dig_P8))>>13;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	089b      	lsrs	r3, r3, #2
 8000c18:	001a      	movs	r2, r3
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <BME280_compensate_P_int32+0x160>)
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	5e5b      	ldrsh	r3, [r3, r1]
 8000c20:	4353      	muls	r3, r2
 8000c22:	135b      	asrs	r3, r3, #13
 8000c24:	60fb      	str	r3, [r7, #12]
    p = (BME280_U32_t)((BME280_S32_t)p + ((var1 + var2 + dig_P7) >> 4));
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	18d3      	adds	r3, r2, r3
 8000c2c:	4a11      	ldr	r2, [pc, #68]	; (8000c74 <BME280_compensate_P_int32+0x164>)
 8000c2e:	2100      	movs	r1, #0
 8000c30:	5e52      	ldrsh	r2, [r2, r1]
 8000c32:	189b      	adds	r3, r3, r2
 8000c34:	111a      	asrs	r2, r3, #4
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	18d3      	adds	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
    return p;
 8000c3c:	697b      	ldr	r3, [r7, #20]
}
 8000c3e:	0018      	movs	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b006      	add	sp, #24
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	20000028 	.word	0x20000028
 8000c4c:	ffff0600 	.word	0xffff0600
 8000c50:	2000003c 	.word	0x2000003c
 8000c54:	2000003a 	.word	0x2000003a
 8000c58:	20000038 	.word	0x20000038
 8000c5c:	20000036 	.word	0x20000036
 8000c60:	20000034 	.word	0x20000034
 8000c64:	2000002e 	.word	0x2000002e
 8000c68:	c3500000 	.word	0xc3500000
 8000c6c:	20000042 	.word	0x20000042
 8000c70:	20000040 	.word	0x20000040
 8000c74:	2000003e 	.word	0x2000003e

08000c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7e:	f000 fa6f 	bl	8001160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c82:	f000 f818 	bl	8000cb6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c86:	f000 f8e9 	bl	8000e5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c8a:	f000 f8b7 	bl	8000dfc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000c8e:	f000 f875 	bl	8000d7c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BME_Config(OSRS_2, OSRS_2, OSRS_2, NORMAL, FILTER_2, MS10);
 8000c92:	2306      	movs	r3, #6
 8000c94:	9301      	str	r3, [sp, #4]
 8000c96:	2301      	movs	r3, #1
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	f7ff fd57 	bl	8000754 <BME_Config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Measure();
 8000ca6:	f7ff fe09 	bl	80008bc <Measure>
	  HAL_Delay(500);
 8000caa:	23fa      	movs	r3, #250	; 0xfa
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f000 faba 	bl	8001228 <HAL_Delay>
	  Measure();
 8000cb4:	e7f7      	b.n	8000ca6 <main+0x2e>

08000cb6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb6:	b590      	push	{r4, r7, lr}
 8000cb8:	b097      	sub	sp, #92	; 0x5c
 8000cba:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cbc:	2428      	movs	r4, #40	; 0x28
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	2330      	movs	r3, #48	; 0x30
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	f002 fbd6 	bl	8003478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ccc:	2318      	movs	r3, #24
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	2310      	movs	r3, #16
 8000cd4:	001a      	movs	r2, r3
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	f002 fbce 	bl	8003478 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	0018      	movs	r0, r3
 8000ce0:	2314      	movs	r3, #20
 8000ce2:	001a      	movs	r2, r3
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	f002 fbc7 	bl	8003478 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cea:	0021      	movs	r1, r4
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	2202      	movs	r2, #2
 8000cf0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2210      	movs	r2, #16
 8000cfc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2202      	movs	r2, #2
 8000d02:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2280      	movs	r2, #128	; 0x80
 8000d08:	0212      	lsls	r2, r2, #8
 8000d0a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	0352      	lsls	r2, r2, #13
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	2200      	movs	r2, #0
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f001 facb 	bl	80022b8 <HAL_RCC_OscConfig>
 8000d22:	1e03      	subs	r3, r0, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000d26:	f000 f911 	bl	8000f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2a:	2118      	movs	r1, #24
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2207      	movs	r2, #7
 8000d30:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2202      	movs	r2, #2
 8000d36:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2101      	movs	r1, #1
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f001 fdd3 	bl	80028f4 <HAL_RCC_ClockConfig>
 8000d4e:	1e03      	subs	r3, r0, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000d52:	f000 f8fb 	bl	8000f4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2220      	movs	r2, #32
 8000d5a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	0018      	movs	r0, r3
 8000d66:	f001 ff19 	bl	8002b9c <HAL_RCCEx_PeriphCLKConfig>
 8000d6a:	1e03      	subs	r3, r0, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000d6e:	f000 f8ed 	bl	8000f4c <Error_Handler>
  }
}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b017      	add	sp, #92	; 0x5c
 8000d78:	bd90      	pop	{r4, r7, pc}
	...

08000d7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000d82:	4a1c      	ldr	r2, [pc, #112]	; (8000df4 <MX_I2C1_Init+0x78>)
 8000d84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000d88:	4a1b      	ldr	r2, [pc, #108]	; (8000df8 <MX_I2C1_Init+0x7c>)
 8000d8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000db8:	0018      	movs	r0, r3
 8000dba:	f000 fc9b 	bl	80016f4 <HAL_I2C_Init>
 8000dbe:	1e03      	subs	r3, r0, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dc2:	f000 f8c3 	bl	8000f4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000dc8:	2100      	movs	r1, #0
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f001 f9dc 	bl	8002188 <HAL_I2CEx_ConfigAnalogFilter>
 8000dd0:	1e03      	subs	r3, r0, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dd4:	f000 f8ba 	bl	8000f4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000dda:	2100      	movs	r1, #0
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f001 fa1f 	bl	8002220 <HAL_I2CEx_ConfigDigitalFilter>
 8000de2:	1e03      	subs	r3, r0, #0
 8000de4:	d001      	beq.n	8000dea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000de6:	f000 f8b1 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	2000005c 	.word	0x2000005c
 8000df4:	40005400 	.word	0x40005400
 8000df8:	2000090e 	.word	0x2000090e

08000dfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e02:	4a15      	ldr	r2, [pc, #84]	; (8000e58 <MX_USART2_UART_Init+0x5c>)
 8000e04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e08:	2296      	movs	r2, #150	; 0x96
 8000e0a:	0212      	lsls	r2, r2, #8
 8000e0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e22:	220c      	movs	r2, #12
 8000e24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <MX_USART2_UART_Init+0x58>)
 8000e40:	0018      	movs	r0, r3
 8000e42:	f001 ff89 	bl	8002d58 <HAL_UART_Init>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d001      	beq.n	8000e4e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e4a:	f000 f87f 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200000a8 	.word	0x200000a8
 8000e58:	40004400 	.word	0x40004400

08000e5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b08b      	sub	sp, #44	; 0x2c
 8000e60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e62:	2414      	movs	r4, #20
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	0018      	movs	r0, r3
 8000e68:	2314      	movs	r3, #20
 8000e6a:	001a      	movs	r2, r3
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	f002 fb03 	bl	8003478 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e72:	4b34      	ldr	r3, [pc, #208]	; (8000f44 <MX_GPIO_Init+0xe8>)
 8000e74:	695a      	ldr	r2, [r3, #20]
 8000e76:	4b33      	ldr	r3, [pc, #204]	; (8000f44 <MX_GPIO_Init+0xe8>)
 8000e78:	2180      	movs	r1, #128	; 0x80
 8000e7a:	0309      	lsls	r1, r1, #12
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	615a      	str	r2, [r3, #20]
 8000e80:	4b30      	ldr	r3, [pc, #192]	; (8000f44 <MX_GPIO_Init+0xe8>)
 8000e82:	695a      	ldr	r2, [r3, #20]
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	031b      	lsls	r3, r3, #12
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <MX_GPIO_Init+0xe8>)
 8000e90:	695a      	ldr	r2, [r3, #20]
 8000e92:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <MX_GPIO_Init+0xe8>)
 8000e94:	2180      	movs	r1, #128	; 0x80
 8000e96:	03c9      	lsls	r1, r1, #15
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	615a      	str	r2, [r3, #20]
 8000e9c:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <MX_GPIO_Init+0xe8>)
 8000e9e:	695a      	ldr	r2, [r3, #20]
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	03db      	lsls	r3, r3, #15
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <MX_GPIO_Init+0xe8>)
 8000eac:	695a      	ldr	r2, [r3, #20]
 8000eae:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <MX_GPIO_Init+0xe8>)
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	0289      	lsls	r1, r1, #10
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	615a      	str	r2, [r3, #20]
 8000eb8:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <MX_GPIO_Init+0xe8>)
 8000eba:	695a      	ldr	r2, [r3, #20]
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	029b      	lsls	r3, r3, #10
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec6:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <MX_GPIO_Init+0xe8>)
 8000ec8:	695a      	ldr	r2, [r3, #20]
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <MX_GPIO_Init+0xe8>)
 8000ecc:	2180      	movs	r1, #128	; 0x80
 8000ece:	02c9      	lsls	r1, r1, #11
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	615a      	str	r2, [r3, #20]
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MX_GPIO_Init+0xe8>)
 8000ed6:	695a      	ldr	r2, [r3, #20]
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	02db      	lsls	r3, r3, #11
 8000edc:	4013      	ands	r3, r2
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ee2:	2390      	movs	r3, #144	; 0x90
 8000ee4:	05db      	lsls	r3, r3, #23
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2120      	movs	r1, #32
 8000eea:	0018      	movs	r0, r3
 8000eec:	f000 fbe4 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ef0:	193b      	adds	r3, r7, r4
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	0192      	lsls	r2, r2, #6
 8000ef6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ef8:	193b      	adds	r3, r7, r4
 8000efa:	2284      	movs	r2, #132	; 0x84
 8000efc:	0392      	lsls	r2, r2, #14
 8000efe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	193b      	adds	r3, r7, r4
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f06:	193b      	adds	r3, r7, r4
 8000f08:	4a0f      	ldr	r2, [pc, #60]	; (8000f48 <MX_GPIO_Init+0xec>)
 8000f0a:	0019      	movs	r1, r3
 8000f0c:	0010      	movs	r0, r2
 8000f0e:	f000 fa63 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f12:	0021      	movs	r1, r4
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	2220      	movs	r2, #32
 8000f18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	187a      	adds	r2, r7, r1
 8000f2e:	2390      	movs	r3, #144	; 0x90
 8000f30:	05db      	lsls	r3, r3, #23
 8000f32:	0011      	movs	r1, r2
 8000f34:	0018      	movs	r0, r3
 8000f36:	f000 fa4f 	bl	80013d8 <HAL_GPIO_Init>

}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b00b      	add	sp, #44	; 0x2c
 8000f40:	bd90      	pop	{r4, r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	40021000 	.word	0x40021000
 8000f48:	48000800 	.word	0x48000800

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <Error_Handler+0x8>
	...

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <HAL_MspInit+0x44>)
 8000f60:	699a      	ldr	r2, [r3, #24]
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_MspInit+0x44>)
 8000f64:	2101      	movs	r1, #1
 8000f66:	430a      	orrs	r2, r1
 8000f68:	619a      	str	r2, [r3, #24]
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <HAL_MspInit+0x44>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4013      	ands	r3, r2
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_MspInit+0x44>)
 8000f78:	69da      	ldr	r2, [r3, #28]
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_MspInit+0x44>)
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	0549      	lsls	r1, r1, #21
 8000f80:	430a      	orrs	r2, r1
 8000f82:	61da      	str	r2, [r3, #28]
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_MspInit+0x44>)
 8000f86:	69da      	ldr	r2, [r3, #28]
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	055b      	lsls	r3, r3, #21
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b08b      	sub	sp, #44	; 0x2c
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	2414      	movs	r4, #20
 8000faa:	193b      	adds	r3, r7, r4
 8000fac:	0018      	movs	r0, r3
 8000fae:	2314      	movs	r3, #20
 8000fb0:	001a      	movs	r2, r3
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	f002 fa60 	bl	8003478 <memset>
  if(hi2c->Instance==I2C1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a1c      	ldr	r2, [pc, #112]	; (8001030 <HAL_I2C_MspInit+0x90>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d131      	bne.n	8001026 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <HAL_I2C_MspInit+0x94>)
 8000fc4:	695a      	ldr	r2, [r3, #20]
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <HAL_I2C_MspInit+0x94>)
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	02c9      	lsls	r1, r1, #11
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	615a      	str	r2, [r3, #20]
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <HAL_I2C_MspInit+0x94>)
 8000fd2:	695a      	ldr	r2, [r3, #20]
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	02db      	lsls	r3, r3, #11
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fde:	0021      	movs	r1, r4
 8000fe0:	187b      	adds	r3, r7, r1
 8000fe2:	22c0      	movs	r2, #192	; 0xc0
 8000fe4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	2212      	movs	r2, #18
 8000fea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff2:	187b      	adds	r3, r7, r1
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <HAL_I2C_MspInit+0x98>)
 8001002:	0019      	movs	r1, r3
 8001004:	0010      	movs	r0, r2
 8001006:	f000 f9e7 	bl	80013d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_I2C_MspInit+0x94>)
 800100c:	69da      	ldr	r2, [r3, #28]
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_I2C_MspInit+0x94>)
 8001010:	2180      	movs	r1, #128	; 0x80
 8001012:	0389      	lsls	r1, r1, #14
 8001014:	430a      	orrs	r2, r1
 8001016:	61da      	str	r2, [r3, #28]
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_I2C_MspInit+0x94>)
 800101a:	69da      	ldr	r2, [r3, #28]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	039b      	lsls	r3, r3, #14
 8001020:	4013      	ands	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b00b      	add	sp, #44	; 0x2c
 800102c:	bd90      	pop	{r4, r7, pc}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	40005400 	.word	0x40005400
 8001034:	40021000 	.word	0x40021000
 8001038:	48000400 	.word	0x48000400

0800103c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b08b      	sub	sp, #44	; 0x2c
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	2414      	movs	r4, #20
 8001046:	193b      	adds	r3, r7, r4
 8001048:	0018      	movs	r0, r3
 800104a:	2314      	movs	r3, #20
 800104c:	001a      	movs	r2, r3
 800104e:	2100      	movs	r1, #0
 8001050:	f002 fa12 	bl	8003478 <memset>
  if(huart->Instance==USART2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <HAL_UART_MspInit+0x90>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d132      	bne.n	80010c4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <HAL_UART_MspInit+0x94>)
 8001060:	69da      	ldr	r2, [r3, #28]
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <HAL_UART_MspInit+0x94>)
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	0289      	lsls	r1, r1, #10
 8001068:	430a      	orrs	r2, r1
 800106a:	61da      	str	r2, [r3, #28]
 800106c:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <HAL_UART_MspInit+0x94>)
 800106e:	69da      	ldr	r2, [r3, #28]
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	029b      	lsls	r3, r3, #10
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <HAL_UART_MspInit+0x94>)
 800107c:	695a      	ldr	r2, [r3, #20]
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <HAL_UART_MspInit+0x94>)
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	0289      	lsls	r1, r1, #10
 8001084:	430a      	orrs	r2, r1
 8001086:	615a      	str	r2, [r3, #20]
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_UART_MspInit+0x94>)
 800108a:	695a      	ldr	r2, [r3, #20]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	029b      	lsls	r3, r3, #10
 8001090:	4013      	ands	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001096:	0021      	movs	r1, r4
 8001098:	187b      	adds	r3, r7, r1
 800109a:	220c      	movs	r2, #12
 800109c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	2202      	movs	r2, #2
 80010a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2203      	movs	r2, #3
 80010ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2201      	movs	r2, #1
 80010b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	187a      	adds	r2, r7, r1
 80010b8:	2390      	movs	r3, #144	; 0x90
 80010ba:	05db      	lsls	r3, r3, #23
 80010bc:	0011      	movs	r1, r2
 80010be:	0018      	movs	r0, r3
 80010c0:	f000 f98a 	bl	80013d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010c4:	46c0      	nop			; (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b00b      	add	sp, #44	; 0x2c
 80010ca:	bd90      	pop	{r4, r7, pc}
 80010cc:	40004400 	.word	0x40004400
 80010d0:	40021000 	.word	0x40021000

080010d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <NMI_Handler+0x4>

080010da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <HardFault_Handler+0x4>

080010e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f8:	f000 f87a 	bl	80011f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800110c:	480d      	ldr	r0, [pc, #52]	; (8001144 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800110e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <LoopForever+0x6>)
  ldr r1, =_edata
 8001112:	490e      	ldr	r1, [pc, #56]	; (800114c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001114:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <LoopForever+0xe>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001128:	4c0b      	ldr	r4, [pc, #44]	; (8001158 <LoopForever+0x16>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001136:	f7ff ffe4 	bl	8001102 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800113a:	f002 f979 	bl	8003430 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800113e:	f7ff fd9b 	bl	8000c78 <main>

08001142 <LoopForever>:

LoopForever:
    b LoopForever
 8001142:	e7fe      	b.n	8001142 <LoopForever>
  ldr   r0, =_estack
 8001144:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800114c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001150:	080034e0 	.word	0x080034e0
  ldr r2, =_sbss
 8001154:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001158:	20000130 	.word	0x20000130

0800115c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC1_IRQHandler>
	...

08001160 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <HAL_Init+0x24>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_Init+0x24>)
 800116a:	2110      	movs	r1, #16
 800116c:	430a      	orrs	r2, r1
 800116e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001170:	2000      	movs	r0, #0
 8001172:	f000 f809 	bl	8001188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001176:	f7ff feef 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	0018      	movs	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	40022000 	.word	0x40022000

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <HAL_InitTick+0x5c>)
 8001192:	681c      	ldr	r4, [r3, #0]
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <HAL_InitTick+0x60>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	0019      	movs	r1, r3
 800119a:	23fa      	movs	r3, #250	; 0xfa
 800119c:	0098      	lsls	r0, r3, #2
 800119e:	f7fe ffb3 	bl	8000108 <__udivsi3>
 80011a2:	0003      	movs	r3, r0
 80011a4:	0019      	movs	r1, r3
 80011a6:	0020      	movs	r0, r4
 80011a8:	f7fe ffae 	bl	8000108 <__udivsi3>
 80011ac:	0003      	movs	r3, r0
 80011ae:	0018      	movs	r0, r3
 80011b0:	f000 f905 	bl	80013be <HAL_SYSTICK_Config>
 80011b4:	1e03      	subs	r3, r0, #0
 80011b6:	d001      	beq.n	80011bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e00f      	b.n	80011dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d80b      	bhi.n	80011da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	2301      	movs	r3, #1
 80011c6:	425b      	negs	r3, r3
 80011c8:	2200      	movs	r2, #0
 80011ca:	0018      	movs	r0, r3
 80011cc:	f000 f8e2 	bl	8001394 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_InitTick+0x64>)
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e000      	b.n	80011dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
}
 80011dc:	0018      	movs	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	b003      	add	sp, #12
 80011e2:	bd90      	pop	{r4, r7, pc}
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000008 	.word	0x20000008
 80011ec:	20000004 	.word	0x20000004

080011f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_IncTick+0x1c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	001a      	movs	r2, r3
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_IncTick+0x20>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	18d2      	adds	r2, r2, r3
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <HAL_IncTick+0x20>)
 8001202:	601a      	str	r2, [r3, #0]
}
 8001204:	46c0      	nop			; (mov r8, r8)
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	20000008 	.word	0x20000008
 8001210:	2000012c 	.word	0x2000012c

08001214 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  return uwTick;
 8001218:	4b02      	ldr	r3, [pc, #8]	; (8001224 <HAL_GetTick+0x10>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	0018      	movs	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	2000012c 	.word	0x2000012c

08001228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001230:	f7ff fff0 	bl	8001214 <HAL_GetTick>
 8001234:	0003      	movs	r3, r0
 8001236:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	3301      	adds	r3, #1
 8001240:	d005      	beq.n	800124e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_Delay+0x44>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	001a      	movs	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	189b      	adds	r3, r3, r2
 800124c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	f7ff ffe0 	bl	8001214 <HAL_GetTick>
 8001254:	0002      	movs	r2, r0
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	429a      	cmp	r2, r3
 800125e:	d8f7      	bhi.n	8001250 <HAL_Delay+0x28>
  {
  }
}
 8001260:	46c0      	nop			; (mov r8, r8)
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	46bd      	mov	sp, r7
 8001266:	b004      	add	sp, #16
 8001268:	bd80      	pop	{r7, pc}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	20000008 	.word	0x20000008

08001270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	0002      	movs	r2, r0
 8001278:	6039      	str	r1, [r7, #0]
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b7f      	cmp	r3, #127	; 0x7f
 8001284:	d828      	bhi.n	80012d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001286:	4a2f      	ldr	r2, [pc, #188]	; (8001344 <__NVIC_SetPriority+0xd4>)
 8001288:	1dfb      	adds	r3, r7, #7
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b25b      	sxtb	r3, r3
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	33c0      	adds	r3, #192	; 0xc0
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	589b      	ldr	r3, [r3, r2]
 8001296:	1dfa      	adds	r2, r7, #7
 8001298:	7812      	ldrb	r2, [r2, #0]
 800129a:	0011      	movs	r1, r2
 800129c:	2203      	movs	r2, #3
 800129e:	400a      	ands	r2, r1
 80012a0:	00d2      	lsls	r2, r2, #3
 80012a2:	21ff      	movs	r1, #255	; 0xff
 80012a4:	4091      	lsls	r1, r2
 80012a6:	000a      	movs	r2, r1
 80012a8:	43d2      	mvns	r2, r2
 80012aa:	401a      	ands	r2, r3
 80012ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	019b      	lsls	r3, r3, #6
 80012b2:	22ff      	movs	r2, #255	; 0xff
 80012b4:	401a      	ands	r2, r3
 80012b6:	1dfb      	adds	r3, r7, #7
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	0018      	movs	r0, r3
 80012bc:	2303      	movs	r3, #3
 80012be:	4003      	ands	r3, r0
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012c4:	481f      	ldr	r0, [pc, #124]	; (8001344 <__NVIC_SetPriority+0xd4>)
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	430a      	orrs	r2, r1
 80012d0:	33c0      	adds	r3, #192	; 0xc0
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012d6:	e031      	b.n	800133c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d8:	4a1b      	ldr	r2, [pc, #108]	; (8001348 <__NVIC_SetPriority+0xd8>)
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	0019      	movs	r1, r3
 80012e0:	230f      	movs	r3, #15
 80012e2:	400b      	ands	r3, r1
 80012e4:	3b08      	subs	r3, #8
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	3306      	adds	r3, #6
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	18d3      	adds	r3, r2, r3
 80012ee:	3304      	adds	r3, #4
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	1dfa      	adds	r2, r7, #7
 80012f4:	7812      	ldrb	r2, [r2, #0]
 80012f6:	0011      	movs	r1, r2
 80012f8:	2203      	movs	r2, #3
 80012fa:	400a      	ands	r2, r1
 80012fc:	00d2      	lsls	r2, r2, #3
 80012fe:	21ff      	movs	r1, #255	; 0xff
 8001300:	4091      	lsls	r1, r2
 8001302:	000a      	movs	r2, r1
 8001304:	43d2      	mvns	r2, r2
 8001306:	401a      	ands	r2, r3
 8001308:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	019b      	lsls	r3, r3, #6
 800130e:	22ff      	movs	r2, #255	; 0xff
 8001310:	401a      	ands	r2, r3
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	0018      	movs	r0, r3
 8001318:	2303      	movs	r3, #3
 800131a:	4003      	ands	r3, r0
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001320:	4809      	ldr	r0, [pc, #36]	; (8001348 <__NVIC_SetPriority+0xd8>)
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	001c      	movs	r4, r3
 8001328:	230f      	movs	r3, #15
 800132a:	4023      	ands	r3, r4
 800132c:	3b08      	subs	r3, #8
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	430a      	orrs	r2, r1
 8001332:	3306      	adds	r3, #6
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	18c3      	adds	r3, r0, r3
 8001338:	3304      	adds	r3, #4
 800133a:	601a      	str	r2, [r3, #0]
}
 800133c:	46c0      	nop			; (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	b003      	add	sp, #12
 8001342:	bd90      	pop	{r4, r7, pc}
 8001344:	e000e100 	.word	0xe000e100
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	1e5a      	subs	r2, r3, #1
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	045b      	lsls	r3, r3, #17
 800135c:	429a      	cmp	r2, r3
 800135e:	d301      	bcc.n	8001364 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001360:	2301      	movs	r3, #1
 8001362:	e010      	b.n	8001386 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <SysTick_Config+0x44>)
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	3a01      	subs	r2, #1
 800136a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136c:	2301      	movs	r3, #1
 800136e:	425b      	negs	r3, r3
 8001370:	2103      	movs	r1, #3
 8001372:	0018      	movs	r0, r3
 8001374:	f7ff ff7c 	bl	8001270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <SysTick_Config+0x44>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <SysTick_Config+0x44>)
 8001380:	2207      	movs	r2, #7
 8001382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001384:	2300      	movs	r3, #0
}
 8001386:	0018      	movs	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	b002      	add	sp, #8
 800138c:	bd80      	pop	{r7, pc}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	e000e010 	.word	0xe000e010

08001394 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	210f      	movs	r1, #15
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	1c02      	adds	r2, r0, #0
 80013a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	187b      	adds	r3, r7, r1
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	b25b      	sxtb	r3, r3
 80013ae:	0011      	movs	r1, r2
 80013b0:	0018      	movs	r0, r3
 80013b2:	f7ff ff5d 	bl	8001270 <__NVIC_SetPriority>
}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b004      	add	sp, #16
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	0018      	movs	r0, r3
 80013ca:	f7ff ffbf 	bl	800134c <SysTick_Config>
 80013ce:	0003      	movs	r3, r0
}
 80013d0:	0018      	movs	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b002      	add	sp, #8
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e6:	e14f      	b.n	8001688 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2101      	movs	r1, #1
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	4091      	lsls	r1, r2
 80013f2:	000a      	movs	r2, r1
 80013f4:	4013      	ands	r3, r2
 80013f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d100      	bne.n	8001400 <HAL_GPIO_Init+0x28>
 80013fe:	e140      	b.n	8001682 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2203      	movs	r2, #3
 8001406:	4013      	ands	r3, r2
 8001408:	2b01      	cmp	r3, #1
 800140a:	d005      	beq.n	8001418 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2203      	movs	r2, #3
 8001412:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001414:	2b02      	cmp	r3, #2
 8001416:	d130      	bne.n	800147a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	409a      	lsls	r2, r3
 8001426:	0013      	movs	r3, r2
 8001428:	43da      	mvns	r2, r3
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	409a      	lsls	r2, r3
 800143a:	0013      	movs	r3, r2
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800144e:	2201      	movs	r2, #1
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	409a      	lsls	r2, r3
 8001454:	0013      	movs	r3, r2
 8001456:	43da      	mvns	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	091b      	lsrs	r3, r3, #4
 8001464:	2201      	movs	r2, #1
 8001466:	401a      	ands	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	409a      	lsls	r2, r3
 800146c:	0013      	movs	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2203      	movs	r2, #3
 8001480:	4013      	ands	r3, r2
 8001482:	2b03      	cmp	r3, #3
 8001484:	d017      	beq.n	80014b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	2203      	movs	r2, #3
 8001492:	409a      	lsls	r2, r3
 8001494:	0013      	movs	r3, r2
 8001496:	43da      	mvns	r2, r3
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	409a      	lsls	r2, r3
 80014a8:	0013      	movs	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2203      	movs	r2, #3
 80014bc:	4013      	ands	r3, r2
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d123      	bne.n	800150a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	08da      	lsrs	r2, r3, #3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3208      	adds	r2, #8
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	58d3      	ldr	r3, [r2, r3]
 80014ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2207      	movs	r2, #7
 80014d4:	4013      	ands	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	220f      	movs	r2, #15
 80014da:	409a      	lsls	r2, r3
 80014dc:	0013      	movs	r3, r2
 80014de:	43da      	mvns	r2, r3
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	691a      	ldr	r2, [r3, #16]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	2107      	movs	r1, #7
 80014ee:	400b      	ands	r3, r1
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	409a      	lsls	r2, r3
 80014f4:	0013      	movs	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	08da      	lsrs	r2, r3, #3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3208      	adds	r2, #8
 8001504:	0092      	lsls	r2, r2, #2
 8001506:	6939      	ldr	r1, [r7, #16]
 8001508:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	2203      	movs	r2, #3
 8001516:	409a      	lsls	r2, r3
 8001518:	0013      	movs	r3, r2
 800151a:	43da      	mvns	r2, r3
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2203      	movs	r2, #3
 8001528:	401a      	ands	r2, r3
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	409a      	lsls	r2, r3
 8001530:	0013      	movs	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	23c0      	movs	r3, #192	; 0xc0
 8001544:	029b      	lsls	r3, r3, #10
 8001546:	4013      	ands	r3, r2
 8001548:	d100      	bne.n	800154c <HAL_GPIO_Init+0x174>
 800154a:	e09a      	b.n	8001682 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154c:	4b54      	ldr	r3, [pc, #336]	; (80016a0 <HAL_GPIO_Init+0x2c8>)
 800154e:	699a      	ldr	r2, [r3, #24]
 8001550:	4b53      	ldr	r3, [pc, #332]	; (80016a0 <HAL_GPIO_Init+0x2c8>)
 8001552:	2101      	movs	r1, #1
 8001554:	430a      	orrs	r2, r1
 8001556:	619a      	str	r2, [r3, #24]
 8001558:	4b51      	ldr	r3, [pc, #324]	; (80016a0 <HAL_GPIO_Init+0x2c8>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	2201      	movs	r2, #1
 800155e:	4013      	ands	r3, r2
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001564:	4a4f      	ldr	r2, [pc, #316]	; (80016a4 <HAL_GPIO_Init+0x2cc>)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	089b      	lsrs	r3, r3, #2
 800156a:	3302      	adds	r3, #2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	589b      	ldr	r3, [r3, r2]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	2203      	movs	r2, #3
 8001576:	4013      	ands	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	220f      	movs	r2, #15
 800157c:	409a      	lsls	r2, r3
 800157e:	0013      	movs	r3, r2
 8001580:	43da      	mvns	r2, r3
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	2390      	movs	r3, #144	; 0x90
 800158c:	05db      	lsls	r3, r3, #23
 800158e:	429a      	cmp	r2, r3
 8001590:	d013      	beq.n	80015ba <HAL_GPIO_Init+0x1e2>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a44      	ldr	r2, [pc, #272]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d00d      	beq.n	80015b6 <HAL_GPIO_Init+0x1de>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a43      	ldr	r2, [pc, #268]	; (80016ac <HAL_GPIO_Init+0x2d4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d007      	beq.n	80015b2 <HAL_GPIO_Init+0x1da>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a42      	ldr	r2, [pc, #264]	; (80016b0 <HAL_GPIO_Init+0x2d8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d101      	bne.n	80015ae <HAL_GPIO_Init+0x1d6>
 80015aa:	2303      	movs	r3, #3
 80015ac:	e006      	b.n	80015bc <HAL_GPIO_Init+0x1e4>
 80015ae:	2305      	movs	r3, #5
 80015b0:	e004      	b.n	80015bc <HAL_GPIO_Init+0x1e4>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e002      	b.n	80015bc <HAL_GPIO_Init+0x1e4>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <HAL_GPIO_Init+0x1e4>
 80015ba:	2300      	movs	r3, #0
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	2103      	movs	r1, #3
 80015c0:	400a      	ands	r2, r1
 80015c2:	0092      	lsls	r2, r2, #2
 80015c4:	4093      	lsls	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015cc:	4935      	ldr	r1, [pc, #212]	; (80016a4 <HAL_GPIO_Init+0x2cc>)
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	3302      	adds	r3, #2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015da:	4b36      	ldr	r3, [pc, #216]	; (80016b4 <HAL_GPIO_Init+0x2dc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	43da      	mvns	r2, r3
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	025b      	lsls	r3, r3, #9
 80015f2:	4013      	ands	r3, r2
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015fe:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <HAL_GPIO_Init+0x2dc>)
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001604:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <HAL_GPIO_Init+0x2dc>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	43da      	mvns	r2, r3
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	029b      	lsls	r3, r3, #10
 800161c:	4013      	ands	r3, r2
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001628:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <HAL_GPIO_Init+0x2dc>)
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <HAL_GPIO_Init+0x2dc>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	43da      	mvns	r2, r3
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	035b      	lsls	r3, r3, #13
 8001646:	4013      	ands	r3, r2
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4313      	orrs	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001652:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <HAL_GPIO_Init+0x2dc>)
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_GPIO_Init+0x2dc>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	43da      	mvns	r2, r3
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	039b      	lsls	r3, r3, #14
 8001670:	4013      	ands	r3, r2
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800167c:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <HAL_GPIO_Init+0x2dc>)
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3301      	adds	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	40da      	lsrs	r2, r3
 8001690:	1e13      	subs	r3, r2, #0
 8001692:	d000      	beq.n	8001696 <HAL_GPIO_Init+0x2be>
 8001694:	e6a8      	b.n	80013e8 <HAL_GPIO_Init+0x10>
  } 
}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	46c0      	nop			; (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	b006      	add	sp, #24
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40010000 	.word	0x40010000
 80016a8:	48000400 	.word	0x48000400
 80016ac:	48000800 	.word	0x48000800
 80016b0:	48000c00 	.word	0x48000c00
 80016b4:	40010400 	.word	0x40010400

080016b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	0008      	movs	r0, r1
 80016c2:	0011      	movs	r1, r2
 80016c4:	1cbb      	adds	r3, r7, #2
 80016c6:	1c02      	adds	r2, r0, #0
 80016c8:	801a      	strh	r2, [r3, #0]
 80016ca:	1c7b      	adds	r3, r7, #1
 80016cc:	1c0a      	adds	r2, r1, #0
 80016ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016d0:	1c7b      	adds	r3, r7, #1
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d004      	beq.n	80016e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016d8:	1cbb      	adds	r3, r7, #2
 80016da:	881a      	ldrh	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016e0:	e003      	b.n	80016ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016e2:	1cbb      	adds	r3, r7, #2
 80016e4:	881a      	ldrh	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	46bd      	mov	sp, r7
 80016ee:	b002      	add	sp, #8
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e082      	b.n	800180c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2241      	movs	r2, #65	; 0x41
 800170a:	5c9b      	ldrb	r3, [r3, r2]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d107      	bne.n	8001722 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2240      	movs	r2, #64	; 0x40
 8001716:	2100      	movs	r1, #0
 8001718:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	0018      	movs	r0, r3
 800171e:	f7ff fc3f 	bl	8000fa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2241      	movs	r2, #65	; 0x41
 8001726:	2124      	movs	r1, #36	; 0x24
 8001728:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2101      	movs	r1, #1
 8001736:	438a      	bics	r2, r1
 8001738:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4934      	ldr	r1, [pc, #208]	; (8001814 <HAL_I2C_Init+0x120>)
 8001744:	400a      	ands	r2, r1
 8001746:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4931      	ldr	r1, [pc, #196]	; (8001818 <HAL_I2C_Init+0x124>)
 8001754:	400a      	ands	r2, r1
 8001756:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d108      	bne.n	8001772 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2180      	movs	r1, #128	; 0x80
 800176a:	0209      	lsls	r1, r1, #8
 800176c:	430a      	orrs	r2, r1
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	e007      	b.n	8001782 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2184      	movs	r1, #132	; 0x84
 800177c:	0209      	lsls	r1, r1, #8
 800177e:	430a      	orrs	r2, r1
 8001780:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d104      	bne.n	8001794 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2280      	movs	r2, #128	; 0x80
 8001790:	0112      	lsls	r2, r2, #4
 8001792:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	491f      	ldr	r1, [pc, #124]	; (800181c <HAL_I2C_Init+0x128>)
 80017a0:	430a      	orrs	r2, r1
 80017a2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	491a      	ldr	r1, [pc, #104]	; (8001818 <HAL_I2C_Init+0x124>)
 80017b0:	400a      	ands	r2, r1
 80017b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691a      	ldr	r2, [r3, #16]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	431a      	orrs	r2, r3
 80017be:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69d9      	ldr	r1, [r3, #28]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1a      	ldr	r2, [r3, #32]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2101      	movs	r1, #1
 80017ea:	430a      	orrs	r2, r1
 80017ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2241      	movs	r2, #65	; 0x41
 80017f8:	2120      	movs	r1, #32
 80017fa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2242      	movs	r2, #66	; 0x42
 8001806:	2100      	movs	r1, #0
 8001808:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	b002      	add	sp, #8
 8001812:	bd80      	pop	{r7, pc}
 8001814:	f0ffffff 	.word	0xf0ffffff
 8001818:	ffff7fff 	.word	0xffff7fff
 800181c:	02008000 	.word	0x02008000

08001820 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b089      	sub	sp, #36	; 0x24
 8001824:	af02      	add	r7, sp, #8
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	000c      	movs	r4, r1
 800182a:	0010      	movs	r0, r2
 800182c:	0019      	movs	r1, r3
 800182e:	230a      	movs	r3, #10
 8001830:	18fb      	adds	r3, r7, r3
 8001832:	1c22      	adds	r2, r4, #0
 8001834:	801a      	strh	r2, [r3, #0]
 8001836:	2308      	movs	r3, #8
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	1c02      	adds	r2, r0, #0
 800183c:	801a      	strh	r2, [r3, #0]
 800183e:	1dbb      	adds	r3, r7, #6
 8001840:	1c0a      	adds	r2, r1, #0
 8001842:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2241      	movs	r2, #65	; 0x41
 8001848:	5c9b      	ldrb	r3, [r3, r2]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b20      	cmp	r3, #32
 800184e:	d000      	beq.n	8001852 <HAL_I2C_Mem_Write+0x32>
 8001850:	e10c      	b.n	8001a6c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001854:	2b00      	cmp	r3, #0
 8001856:	d004      	beq.n	8001862 <HAL_I2C_Mem_Write+0x42>
 8001858:	232c      	movs	r3, #44	; 0x2c
 800185a:	18fb      	adds	r3, r7, r3
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d105      	bne.n	800186e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2280      	movs	r2, #128	; 0x80
 8001866:	0092      	lsls	r2, r2, #2
 8001868:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e0ff      	b.n	8001a6e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2240      	movs	r2, #64	; 0x40
 8001872:	5c9b      	ldrb	r3, [r3, r2]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d101      	bne.n	800187c <HAL_I2C_Mem_Write+0x5c>
 8001878:	2302      	movs	r3, #2
 800187a:	e0f8      	b.n	8001a6e <HAL_I2C_Mem_Write+0x24e>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2240      	movs	r2, #64	; 0x40
 8001880:	2101      	movs	r1, #1
 8001882:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001884:	f7ff fcc6 	bl	8001214 <HAL_GetTick>
 8001888:	0003      	movs	r3, r0
 800188a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	0219      	lsls	r1, r3, #8
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2319      	movs	r3, #25
 8001898:	2201      	movs	r2, #1
 800189a:	f000 fb0b 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 800189e:	1e03      	subs	r3, r0, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e0e3      	b.n	8001a6e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2241      	movs	r2, #65	; 0x41
 80018aa:	2121      	movs	r1, #33	; 0x21
 80018ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2242      	movs	r2, #66	; 0x42
 80018b2:	2140      	movs	r1, #64	; 0x40
 80018b4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	222c      	movs	r2, #44	; 0x2c
 80018c6:	18ba      	adds	r2, r7, r2
 80018c8:	8812      	ldrh	r2, [r2, #0]
 80018ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018d2:	1dbb      	adds	r3, r7, #6
 80018d4:	881c      	ldrh	r4, [r3, #0]
 80018d6:	2308      	movs	r3, #8
 80018d8:	18fb      	adds	r3, r7, r3
 80018da:	881a      	ldrh	r2, [r3, #0]
 80018dc:	230a      	movs	r3, #10
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	8819      	ldrh	r1, [r3, #0]
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	0023      	movs	r3, r4
 80018ee:	f000 f9f9 	bl	8001ce4 <I2C_RequestMemoryWrite>
 80018f2:	1e03      	subs	r3, r0, #0
 80018f4:	d005      	beq.n	8001902 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2240      	movs	r2, #64	; 0x40
 80018fa:	2100      	movs	r1, #0
 80018fc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e0b5      	b.n	8001a6e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001906:	b29b      	uxth	r3, r3
 8001908:	2bff      	cmp	r3, #255	; 0xff
 800190a:	d911      	bls.n	8001930 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	22ff      	movs	r2, #255	; 0xff
 8001910:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001916:	b2da      	uxtb	r2, r3
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	045c      	lsls	r4, r3, #17
 800191c:	230a      	movs	r3, #10
 800191e:	18fb      	adds	r3, r7, r3
 8001920:	8819      	ldrh	r1, [r3, #0]
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	2300      	movs	r3, #0
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	0023      	movs	r3, r4
 800192a:	f000 fbf7 	bl	800211c <I2C_TransferConfig>
 800192e:	e012      	b.n	8001956 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001934:	b29a      	uxth	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193e:	b2da      	uxtb	r2, r3
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	049c      	lsls	r4, r3, #18
 8001944:	230a      	movs	r3, #10
 8001946:	18fb      	adds	r3, r7, r3
 8001948:	8819      	ldrh	r1, [r3, #0]
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	2300      	movs	r3, #0
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	0023      	movs	r3, r4
 8001952:	f000 fbe3 	bl	800211c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	0018      	movs	r0, r3
 800195e:	f000 fae8 	bl	8001f32 <I2C_WaitOnTXISFlagUntilTimeout>
 8001962:	1e03      	subs	r3, r0, #0
 8001964:	d001      	beq.n	800196a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e081      	b.n	8001a6e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	781a      	ldrb	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001984:	b29b      	uxth	r3, r3
 8001986:	3b01      	subs	r3, #1
 8001988:	b29a      	uxth	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001992:	3b01      	subs	r3, #1
 8001994:	b29a      	uxth	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800199e:	b29b      	uxth	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d03a      	beq.n	8001a1a <HAL_I2C_Mem_Write+0x1fa>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d136      	bne.n	8001a1a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	0013      	movs	r3, r2
 80019b6:	2200      	movs	r2, #0
 80019b8:	2180      	movs	r1, #128	; 0x80
 80019ba:	f000 fa7b 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 80019be:	1e03      	subs	r3, r0, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e053      	b.n	8001a6e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	2bff      	cmp	r3, #255	; 0xff
 80019ce:	d911      	bls.n	80019f4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	22ff      	movs	r2, #255	; 0xff
 80019d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	045c      	lsls	r4, r3, #17
 80019e0:	230a      	movs	r3, #10
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	8819      	ldrh	r1, [r3, #0]
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	2300      	movs	r3, #0
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	0023      	movs	r3, r4
 80019ee:	f000 fb95 	bl	800211c <I2C_TransferConfig>
 80019f2:	e012      	b.n	8001a1a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	049c      	lsls	r4, r3, #18
 8001a08:	230a      	movs	r3, #10
 8001a0a:	18fb      	adds	r3, r7, r3
 8001a0c:	8819      	ldrh	r1, [r3, #0]
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	2300      	movs	r3, #0
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	0023      	movs	r3, r4
 8001a16:	f000 fb81 	bl	800211c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d198      	bne.n	8001956 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f000 fac0 	bl	8001fb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a30:	1e03      	subs	r3, r0, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e01a      	b.n	8001a6e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	490b      	ldr	r1, [pc, #44]	; (8001a78 <HAL_I2C_Mem_Write+0x258>)
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2241      	movs	r2, #65	; 0x41
 8001a54:	2120      	movs	r1, #32
 8001a56:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2242      	movs	r2, #66	; 0x42
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2240      	movs	r2, #64	; 0x40
 8001a64:	2100      	movs	r1, #0
 8001a66:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e000      	b.n	8001a6e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001a6c:	2302      	movs	r3, #2
  }
}
 8001a6e:	0018      	movs	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b007      	add	sp, #28
 8001a74:	bd90      	pop	{r4, r7, pc}
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	fe00e800 	.word	0xfe00e800

08001a7c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af02      	add	r7, sp, #8
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	000c      	movs	r4, r1
 8001a86:	0010      	movs	r0, r2
 8001a88:	0019      	movs	r1, r3
 8001a8a:	230a      	movs	r3, #10
 8001a8c:	18fb      	adds	r3, r7, r3
 8001a8e:	1c22      	adds	r2, r4, #0
 8001a90:	801a      	strh	r2, [r3, #0]
 8001a92:	2308      	movs	r3, #8
 8001a94:	18fb      	adds	r3, r7, r3
 8001a96:	1c02      	adds	r2, r0, #0
 8001a98:	801a      	strh	r2, [r3, #0]
 8001a9a:	1dbb      	adds	r3, r7, #6
 8001a9c:	1c0a      	adds	r2, r1, #0
 8001a9e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2241      	movs	r2, #65	; 0x41
 8001aa4:	5c9b      	ldrb	r3, [r3, r2]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b20      	cmp	r3, #32
 8001aaa:	d000      	beq.n	8001aae <HAL_I2C_Mem_Read+0x32>
 8001aac:	e110      	b.n	8001cd0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <HAL_I2C_Mem_Read+0x42>
 8001ab4:	232c      	movs	r3, #44	; 0x2c
 8001ab6:	18fb      	adds	r3, r7, r3
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d105      	bne.n	8001aca <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	0092      	lsls	r2, r2, #2
 8001ac4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e103      	b.n	8001cd2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2240      	movs	r2, #64	; 0x40
 8001ace:	5c9b      	ldrb	r3, [r3, r2]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_I2C_Mem_Read+0x5c>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e0fc      	b.n	8001cd2 <HAL_I2C_Mem_Read+0x256>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2240      	movs	r2, #64	; 0x40
 8001adc:	2101      	movs	r1, #1
 8001ade:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ae0:	f7ff fb98 	bl	8001214 <HAL_GetTick>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	0219      	lsls	r1, r3, #8
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	2319      	movs	r3, #25
 8001af4:	2201      	movs	r2, #1
 8001af6:	f000 f9dd 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 8001afa:	1e03      	subs	r3, r0, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e0e7      	b.n	8001cd2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2241      	movs	r2, #65	; 0x41
 8001b06:	2122      	movs	r1, #34	; 0x22
 8001b08:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2242      	movs	r2, #66	; 0x42
 8001b0e:	2140      	movs	r1, #64	; 0x40
 8001b10:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	222c      	movs	r2, #44	; 0x2c
 8001b22:	18ba      	adds	r2, r7, r2
 8001b24:	8812      	ldrh	r2, [r2, #0]
 8001b26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b2e:	1dbb      	adds	r3, r7, #6
 8001b30:	881c      	ldrh	r4, [r3, #0]
 8001b32:	2308      	movs	r3, #8
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	881a      	ldrh	r2, [r3, #0]
 8001b38:	230a      	movs	r3, #10
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	8819      	ldrh	r1, [r3, #0]
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	0023      	movs	r3, r4
 8001b4a:	f000 f92f 	bl	8001dac <I2C_RequestMemoryRead>
 8001b4e:	1e03      	subs	r3, r0, #0
 8001b50:	d005      	beq.n	8001b5e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2240      	movs	r2, #64	; 0x40
 8001b56:	2100      	movs	r1, #0
 8001b58:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0b9      	b.n	8001cd2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	2bff      	cmp	r3, #255	; 0xff
 8001b66:	d911      	bls.n	8001b8c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	22ff      	movs	r2, #255	; 0xff
 8001b6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	045c      	lsls	r4, r3, #17
 8001b78:	230a      	movs	r3, #10
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	8819      	ldrh	r1, [r3, #0]
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	4b56      	ldr	r3, [pc, #344]	; (8001cdc <HAL_I2C_Mem_Read+0x260>)
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	0023      	movs	r3, r4
 8001b86:	f000 fac9 	bl	800211c <I2C_TransferConfig>
 8001b8a:	e012      	b.n	8001bb2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	049c      	lsls	r4, r3, #18
 8001ba0:	230a      	movs	r3, #10
 8001ba2:	18fb      	adds	r3, r7, r3
 8001ba4:	8819      	ldrh	r1, [r3, #0]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	4b4c      	ldr	r3, [pc, #304]	; (8001cdc <HAL_I2C_Mem_Read+0x260>)
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	0023      	movs	r3, r4
 8001bae:	f000 fab5 	bl	800211c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	0013      	movs	r3, r2
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2104      	movs	r1, #4
 8001bc0:	f000 f978 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 8001bc4:	1e03      	subs	r3, r0, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e082      	b.n	8001cd2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d03a      	beq.n	8001c7e <HAL_I2C_Mem_Read+0x202>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d136      	bne.n	8001c7e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	0013      	movs	r3, r2
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2180      	movs	r1, #128	; 0x80
 8001c1e:	f000 f949 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 8001c22:	1e03      	subs	r3, r0, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e053      	b.n	8001cd2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	2bff      	cmp	r3, #255	; 0xff
 8001c32:	d911      	bls.n	8001c58 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	22ff      	movs	r2, #255	; 0xff
 8001c38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	045c      	lsls	r4, r3, #17
 8001c44:	230a      	movs	r3, #10
 8001c46:	18fb      	adds	r3, r7, r3
 8001c48:	8819      	ldrh	r1, [r3, #0]
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	0023      	movs	r3, r4
 8001c52:	f000 fa63 	bl	800211c <I2C_TransferConfig>
 8001c56:	e012      	b.n	8001c7e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	049c      	lsls	r4, r3, #18
 8001c6c:	230a      	movs	r3, #10
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	8819      	ldrh	r1, [r3, #0]
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	2300      	movs	r3, #0
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	0023      	movs	r3, r4
 8001c7a:	f000 fa4f 	bl	800211c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d194      	bne.n	8001bb2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f000 f98e 	bl	8001fb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c94:	1e03      	subs	r3, r0, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e01a      	b.n	8001cd2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	490c      	ldr	r1, [pc, #48]	; (8001ce0 <HAL_I2C_Mem_Read+0x264>)
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2241      	movs	r2, #65	; 0x41
 8001cb8:	2120      	movs	r1, #32
 8001cba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2242      	movs	r2, #66	; 0x42
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2240      	movs	r2, #64	; 0x40
 8001cc8:	2100      	movs	r1, #0
 8001cca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e000      	b.n	8001cd2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001cd0:	2302      	movs	r3, #2
  }
}
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b007      	add	sp, #28
 8001cd8:	bd90      	pop	{r4, r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	80002400 	.word	0x80002400
 8001ce0:	fe00e800 	.word	0xfe00e800

08001ce4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001ce4:	b5b0      	push	{r4, r5, r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	000c      	movs	r4, r1
 8001cee:	0010      	movs	r0, r2
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	250a      	movs	r5, #10
 8001cf4:	197b      	adds	r3, r7, r5
 8001cf6:	1c22      	adds	r2, r4, #0
 8001cf8:	801a      	strh	r2, [r3, #0]
 8001cfa:	2308      	movs	r3, #8
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	1c02      	adds	r2, r0, #0
 8001d00:	801a      	strh	r2, [r3, #0]
 8001d02:	1dbb      	adds	r3, r7, #6
 8001d04:	1c0a      	adds	r2, r1, #0
 8001d06:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001d08:	1dbb      	adds	r3, r7, #6
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	045c      	lsls	r4, r3, #17
 8001d12:	197b      	adds	r3, r7, r5
 8001d14:	8819      	ldrh	r1, [r3, #0]
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <I2C_RequestMemoryWrite+0xc4>)
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	0023      	movs	r3, r4
 8001d1e:	f000 f9fd 	bl	800211c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d24:	6a39      	ldr	r1, [r7, #32]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f000 f902 	bl	8001f32 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d2e:	1e03      	subs	r3, r0, #0
 8001d30:	d001      	beq.n	8001d36 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e033      	b.n	8001d9e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d36:	1dbb      	adds	r3, r7, #6
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d107      	bne.n	8001d4e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d3e:	2308      	movs	r3, #8
 8001d40:	18fb      	adds	r3, r7, r3
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28
 8001d4c:	e019      	b.n	8001d82 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d4e:	2308      	movs	r3, #8
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d62:	6a39      	ldr	r1, [r7, #32]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	0018      	movs	r0, r3
 8001d68:	f000 f8e3 	bl	8001f32 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d6c:	1e03      	subs	r3, r0, #0
 8001d6e:	d001      	beq.n	8001d74 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e014      	b.n	8001d9e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d74:	2308      	movs	r3, #8
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001d82:	6a3a      	ldr	r2, [r7, #32]
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	0013      	movs	r3, r2
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2180      	movs	r1, #128	; 0x80
 8001d90:	f000 f890 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 8001d94:	1e03      	subs	r3, r0, #0
 8001d96:	d001      	beq.n	8001d9c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	0018      	movs	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b004      	add	sp, #16
 8001da4:	bdb0      	pop	{r4, r5, r7, pc}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	80002000 	.word	0x80002000

08001dac <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001dac:	b5b0      	push	{r4, r5, r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af02      	add	r7, sp, #8
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	000c      	movs	r4, r1
 8001db6:	0010      	movs	r0, r2
 8001db8:	0019      	movs	r1, r3
 8001dba:	250a      	movs	r5, #10
 8001dbc:	197b      	adds	r3, r7, r5
 8001dbe:	1c22      	adds	r2, r4, #0
 8001dc0:	801a      	strh	r2, [r3, #0]
 8001dc2:	2308      	movs	r3, #8
 8001dc4:	18fb      	adds	r3, r7, r3
 8001dc6:	1c02      	adds	r2, r0, #0
 8001dc8:	801a      	strh	r2, [r3, #0]
 8001dca:	1dbb      	adds	r3, r7, #6
 8001dcc:	1c0a      	adds	r2, r1, #0
 8001dce:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001dd0:	1dbb      	adds	r3, r7, #6
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	197b      	adds	r3, r7, r5
 8001dd8:	8819      	ldrh	r1, [r3, #0]
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <I2C_RequestMemoryRead+0xc0>)
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2300      	movs	r3, #0
 8001de2:	f000 f99b 	bl	800211c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de8:	6a39      	ldr	r1, [r7, #32]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	0018      	movs	r0, r3
 8001dee:	f000 f8a0 	bl	8001f32 <I2C_WaitOnTXISFlagUntilTimeout>
 8001df2:	1e03      	subs	r3, r0, #0
 8001df4:	d001      	beq.n	8001dfa <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e033      	b.n	8001e62 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dfa:	1dbb      	adds	r3, r7, #6
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d107      	bne.n	8001e12 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e02:	2308      	movs	r3, #8
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	629a      	str	r2, [r3, #40]	; 0x28
 8001e10:	e019      	b.n	8001e46 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e12:	2308      	movs	r3, #8
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e26:	6a39      	ldr	r1, [r7, #32]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f000 f881 	bl	8001f32 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e30:	1e03      	subs	r3, r0, #0
 8001e32:	d001      	beq.n	8001e38 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e014      	b.n	8001e62 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e38:	2308      	movs	r3, #8
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001e46:	6a3a      	ldr	r2, [r7, #32]
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	0013      	movs	r3, r2
 8001e50:	2200      	movs	r2, #0
 8001e52:	2140      	movs	r1, #64	; 0x40
 8001e54:	f000 f82e 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 8001e58:	1e03      	subs	r3, r0, #0
 8001e5a:	d001      	beq.n	8001e60 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	0018      	movs	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b004      	add	sp, #16
 8001e68:	bdb0      	pop	{r4, r5, r7, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	80002000 	.word	0x80002000

08001e70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d103      	bne.n	8001e8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	2201      	movs	r2, #1
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d007      	beq.n	8001eac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699a      	ldr	r2, [r3, #24]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	619a      	str	r2, [r3, #24]
  }
}
 8001eac:	46c0      	nop			; (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b002      	add	sp, #8
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	1dfb      	adds	r3, r7, #7
 8001ec2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ec4:	e021      	b.n	8001f0a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	d01e      	beq.n	8001f0a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ecc:	f7ff f9a2 	bl	8001214 <HAL_GetTick>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d302      	bcc.n	8001ee2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d113      	bne.n	8001f0a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2241      	movs	r2, #65	; 0x41
 8001ef2:	2120      	movs	r1, #32
 8001ef4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2242      	movs	r2, #66	; 0x42
 8001efa:	2100      	movs	r1, #0
 8001efc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2240      	movs	r2, #64	; 0x40
 8001f02:	2100      	movs	r1, #0
 8001f04:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e00f      	b.n	8001f2a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	4013      	ands	r3, r2
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	425a      	negs	r2, r3
 8001f1a:	4153      	adcs	r3, r2
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	001a      	movs	r2, r3
 8001f20:	1dfb      	adds	r3, r7, #7
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d0ce      	beq.n	8001ec6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b004      	add	sp, #16
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f3e:	e02b      	b.n	8001f98 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	68b9      	ldr	r1, [r7, #8]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	0018      	movs	r0, r3
 8001f48:	f000 f86e 	bl	8002028 <I2C_IsAcknowledgeFailed>
 8001f4c:	1e03      	subs	r3, r0, #0
 8001f4e:	d001      	beq.n	8001f54 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e029      	b.n	8001fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	3301      	adds	r3, #1
 8001f58:	d01e      	beq.n	8001f98 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f5a:	f7ff f95b 	bl	8001214 <HAL_GetTick>
 8001f5e:	0002      	movs	r2, r0
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d302      	bcc.n	8001f70 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d113      	bne.n	8001f98 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	2220      	movs	r2, #32
 8001f76:	431a      	orrs	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2241      	movs	r2, #65	; 0x41
 8001f80:	2120      	movs	r1, #32
 8001f82:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2242      	movs	r2, #66	; 0x42
 8001f88:	2100      	movs	r1, #0
 8001f8a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2240      	movs	r2, #64	; 0x40
 8001f90:	2100      	movs	r1, #0
 8001f92:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e007      	b.n	8001fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d1cc      	bne.n	8001f40 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	0018      	movs	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b004      	add	sp, #16
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fbc:	e028      	b.n	8002010 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f000 f82f 	bl	8002028 <I2C_IsAcknowledgeFailed>
 8001fca:	1e03      	subs	r3, r0, #0
 8001fcc:	d001      	beq.n	8001fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e026      	b.n	8002020 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd2:	f7ff f91f 	bl	8001214 <HAL_GetTick>
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d302      	bcc.n	8001fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d113      	bne.n	8002010 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fec:	2220      	movs	r2, #32
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2241      	movs	r2, #65	; 0x41
 8001ff8:	2120      	movs	r1, #32
 8001ffa:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2242      	movs	r2, #66	; 0x42
 8002000:	2100      	movs	r1, #0
 8002002:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2240      	movs	r2, #64	; 0x40
 8002008:	2100      	movs	r1, #0
 800200a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e007      	b.n	8002020 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	2220      	movs	r2, #32
 8002018:	4013      	ands	r3, r2
 800201a:	2b20      	cmp	r3, #32
 800201c:	d1cf      	bne.n	8001fbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	0018      	movs	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	b004      	add	sp, #16
 8002026:	bd80      	pop	{r7, pc}

08002028 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2210      	movs	r2, #16
 800203c:	4013      	ands	r3, r2
 800203e:	2b10      	cmp	r3, #16
 8002040:	d164      	bne.n	800210c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	049b      	lsls	r3, r3, #18
 800204c:	401a      	ands	r2, r3
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	049b      	lsls	r3, r3, #18
 8002052:	429a      	cmp	r2, r3
 8002054:	d02b      	beq.n	80020ae <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2180      	movs	r1, #128	; 0x80
 8002062:	01c9      	lsls	r1, r1, #7
 8002064:	430a      	orrs	r2, r1
 8002066:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002068:	e021      	b.n	80020ae <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	3301      	adds	r3, #1
 800206e:	d01e      	beq.n	80020ae <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002070:	f7ff f8d0 	bl	8001214 <HAL_GetTick>
 8002074:	0002      	movs	r2, r0
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	429a      	cmp	r2, r3
 800207e:	d302      	bcc.n	8002086 <I2C_IsAcknowledgeFailed+0x5e>
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d113      	bne.n	80020ae <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	2220      	movs	r2, #32
 800208c:	431a      	orrs	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2241      	movs	r2, #65	; 0x41
 8002096:	2120      	movs	r1, #32
 8002098:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2242      	movs	r2, #66	; 0x42
 800209e:	2100      	movs	r1, #0
 80020a0:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2240      	movs	r2, #64	; 0x40
 80020a6:	2100      	movs	r1, #0
 80020a8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e02f      	b.n	800210e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	2220      	movs	r2, #32
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b20      	cmp	r3, #32
 80020ba:	d1d6      	bne.n	800206a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2210      	movs	r2, #16
 80020c2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2220      	movs	r2, #32
 80020ca:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	0018      	movs	r0, r3
 80020d0:	f7ff fece 	bl	8001e70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	490e      	ldr	r1, [pc, #56]	; (8002118 <I2C_IsAcknowledgeFailed+0xf0>)
 80020e0:	400a      	ands	r2, r1
 80020e2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e8:	2204      	movs	r2, #4
 80020ea:	431a      	orrs	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2241      	movs	r2, #65	; 0x41
 80020f4:	2120      	movs	r1, #32
 80020f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2242      	movs	r2, #66	; 0x42
 80020fc:	2100      	movs	r1, #0
 80020fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2240      	movs	r2, #64	; 0x40
 8002104:	2100      	movs	r1, #0
 8002106:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	0018      	movs	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	b004      	add	sp, #16
 8002114:	bd80      	pop	{r7, pc}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	fe00e800 	.word	0xfe00e800

0800211c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800211c:	b590      	push	{r4, r7, lr}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	0008      	movs	r0, r1
 8002126:	0011      	movs	r1, r2
 8002128:	607b      	str	r3, [r7, #4]
 800212a:	240a      	movs	r4, #10
 800212c:	193b      	adds	r3, r7, r4
 800212e:	1c02      	adds	r2, r0, #0
 8002130:	801a      	strh	r2, [r3, #0]
 8002132:	2009      	movs	r0, #9
 8002134:	183b      	adds	r3, r7, r0
 8002136:	1c0a      	adds	r2, r1, #0
 8002138:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	6a3a      	ldr	r2, [r7, #32]
 8002142:	0d51      	lsrs	r1, r2, #21
 8002144:	2280      	movs	r2, #128	; 0x80
 8002146:	00d2      	lsls	r2, r2, #3
 8002148:	400a      	ands	r2, r1
 800214a:	490e      	ldr	r1, [pc, #56]	; (8002184 <I2C_TransferConfig+0x68>)
 800214c:	430a      	orrs	r2, r1
 800214e:	43d2      	mvns	r2, r2
 8002150:	401a      	ands	r2, r3
 8002152:	0011      	movs	r1, r2
 8002154:	193b      	adds	r3, r7, r4
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	059b      	lsls	r3, r3, #22
 800215a:	0d9a      	lsrs	r2, r3, #22
 800215c:	183b      	adds	r3, r7, r0
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	0418      	lsls	r0, r3, #16
 8002162:	23ff      	movs	r3, #255	; 0xff
 8002164:	041b      	lsls	r3, r3, #16
 8002166:	4003      	ands	r3, r0
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	431a      	orrs	r2, r3
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	431a      	orrs	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	46bd      	mov	sp, r7
 800217e:	b005      	add	sp, #20
 8002180:	bd90      	pop	{r4, r7, pc}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	03ff63ff 	.word	0x03ff63ff

08002188 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2241      	movs	r2, #65	; 0x41
 8002196:	5c9b      	ldrb	r3, [r3, r2]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b20      	cmp	r3, #32
 800219c:	d138      	bne.n	8002210 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2240      	movs	r2, #64	; 0x40
 80021a2:	5c9b      	ldrb	r3, [r3, r2]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e032      	b.n	8002212 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2240      	movs	r2, #64	; 0x40
 80021b0:	2101      	movs	r1, #1
 80021b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2241      	movs	r2, #65	; 0x41
 80021b8:	2124      	movs	r1, #36	; 0x24
 80021ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2101      	movs	r1, #1
 80021c8:	438a      	bics	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4911      	ldr	r1, [pc, #68]	; (800221c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80021d8:	400a      	ands	r2, r1
 80021da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6819      	ldr	r1, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2101      	movs	r1, #1
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2241      	movs	r2, #65	; 0x41
 8002200:	2120      	movs	r1, #32
 8002202:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2240      	movs	r2, #64	; 0x40
 8002208:	2100      	movs	r1, #0
 800220a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	e000      	b.n	8002212 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002210:	2302      	movs	r3, #2
  }
}
 8002212:	0018      	movs	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	b002      	add	sp, #8
 8002218:	bd80      	pop	{r7, pc}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	ffffefff 	.word	0xffffefff

08002220 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2241      	movs	r2, #65	; 0x41
 800222e:	5c9b      	ldrb	r3, [r3, r2]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b20      	cmp	r3, #32
 8002234:	d139      	bne.n	80022aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2240      	movs	r2, #64	; 0x40
 800223a:	5c9b      	ldrb	r3, [r3, r2]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002240:	2302      	movs	r3, #2
 8002242:	e033      	b.n	80022ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2240      	movs	r2, #64	; 0x40
 8002248:	2101      	movs	r1, #1
 800224a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2241      	movs	r2, #65	; 0x41
 8002250:	2124      	movs	r1, #36	; 0x24
 8002252:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2101      	movs	r1, #1
 8002260:	438a      	bics	r2, r1
 8002262:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4a11      	ldr	r2, [pc, #68]	; (80022b4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002270:	4013      	ands	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	4313      	orrs	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2101      	movs	r1, #1
 8002292:	430a      	orrs	r2, r1
 8002294:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2241      	movs	r2, #65	; 0x41
 800229a:	2120      	movs	r1, #32
 800229c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2240      	movs	r2, #64	; 0x40
 80022a2:	2100      	movs	r1, #0
 80022a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	e000      	b.n	80022ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022aa:	2302      	movs	r3, #2
  }
}
 80022ac:	0018      	movs	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b004      	add	sp, #16
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	fffff0ff 	.word	0xfffff0ff

080022b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e305      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2201      	movs	r2, #1
 80022d0:	4013      	ands	r3, r2
 80022d2:	d100      	bne.n	80022d6 <HAL_RCC_OscConfig+0x1e>
 80022d4:	e08d      	b.n	80023f2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022d6:	4bc5      	ldr	r3, [pc, #788]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	220c      	movs	r2, #12
 80022dc:	4013      	ands	r3, r2
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d00e      	beq.n	8002300 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022e2:	4bc2      	ldr	r3, [pc, #776]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	220c      	movs	r2, #12
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d116      	bne.n	800231c <HAL_RCC_OscConfig+0x64>
 80022ee:	4bbf      	ldr	r3, [pc, #764]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	23c0      	movs	r3, #192	; 0xc0
 80022f4:	025b      	lsls	r3, r3, #9
 80022f6:	401a      	ands	r2, r3
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	025b      	lsls	r3, r3, #9
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d10d      	bne.n	800231c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002300:	4bba      	ldr	r3, [pc, #744]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	029b      	lsls	r3, r3, #10
 8002308:	4013      	ands	r3, r2
 800230a:	d100      	bne.n	800230e <HAL_RCC_OscConfig+0x56>
 800230c:	e070      	b.n	80023f0 <HAL_RCC_OscConfig+0x138>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d000      	beq.n	8002318 <HAL_RCC_OscConfig+0x60>
 8002316:	e06b      	b.n	80023f0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e2dc      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d107      	bne.n	8002334 <HAL_RCC_OscConfig+0x7c>
 8002324:	4bb1      	ldr	r3, [pc, #708]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4bb0      	ldr	r3, [pc, #704]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800232a:	2180      	movs	r1, #128	; 0x80
 800232c:	0249      	lsls	r1, r1, #9
 800232e:	430a      	orrs	r2, r1
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	e02f      	b.n	8002394 <HAL_RCC_OscConfig+0xdc>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10c      	bne.n	8002356 <HAL_RCC_OscConfig+0x9e>
 800233c:	4bab      	ldr	r3, [pc, #684]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4baa      	ldr	r3, [pc, #680]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002342:	49ab      	ldr	r1, [pc, #684]	; (80025f0 <HAL_RCC_OscConfig+0x338>)
 8002344:	400a      	ands	r2, r1
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	4ba8      	ldr	r3, [pc, #672]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4ba7      	ldr	r3, [pc, #668]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800234e:	49a9      	ldr	r1, [pc, #676]	; (80025f4 <HAL_RCC_OscConfig+0x33c>)
 8002350:	400a      	ands	r2, r1
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	e01e      	b.n	8002394 <HAL_RCC_OscConfig+0xdc>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b05      	cmp	r3, #5
 800235c:	d10e      	bne.n	800237c <HAL_RCC_OscConfig+0xc4>
 800235e:	4ba3      	ldr	r3, [pc, #652]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	4ba2      	ldr	r3, [pc, #648]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002364:	2180      	movs	r1, #128	; 0x80
 8002366:	02c9      	lsls	r1, r1, #11
 8002368:	430a      	orrs	r2, r1
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	4b9f      	ldr	r3, [pc, #636]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b9e      	ldr	r3, [pc, #632]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002372:	2180      	movs	r1, #128	; 0x80
 8002374:	0249      	lsls	r1, r1, #9
 8002376:	430a      	orrs	r2, r1
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e00b      	b.n	8002394 <HAL_RCC_OscConfig+0xdc>
 800237c:	4b9b      	ldr	r3, [pc, #620]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b9a      	ldr	r3, [pc, #616]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002382:	499b      	ldr	r1, [pc, #620]	; (80025f0 <HAL_RCC_OscConfig+0x338>)
 8002384:	400a      	ands	r2, r1
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	4b98      	ldr	r3, [pc, #608]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4b97      	ldr	r3, [pc, #604]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800238e:	4999      	ldr	r1, [pc, #612]	; (80025f4 <HAL_RCC_OscConfig+0x33c>)
 8002390:	400a      	ands	r2, r1
 8002392:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d014      	beq.n	80023c6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7fe ff3a 	bl	8001214 <HAL_GetTick>
 80023a0:	0003      	movs	r3, r0
 80023a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a6:	f7fe ff35 	bl	8001214 <HAL_GetTick>
 80023aa:	0002      	movs	r2, r0
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b64      	cmp	r3, #100	; 0x64
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e28e      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b8:	4b8c      	ldr	r3, [pc, #560]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	029b      	lsls	r3, r3, #10
 80023c0:	4013      	ands	r3, r2
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0xee>
 80023c4:	e015      	b.n	80023f2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7fe ff25 	bl	8001214 <HAL_GetTick>
 80023ca:	0003      	movs	r3, r0
 80023cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d0:	f7fe ff20 	bl	8001214 <HAL_GetTick>
 80023d4:	0002      	movs	r2, r0
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e279      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	4b82      	ldr	r3, [pc, #520]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	029b      	lsls	r3, r3, #10
 80023ea:	4013      	ands	r3, r2
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x118>
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2202      	movs	r2, #2
 80023f8:	4013      	ands	r3, r2
 80023fa:	d100      	bne.n	80023fe <HAL_RCC_OscConfig+0x146>
 80023fc:	e06c      	b.n	80024d8 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023fe:	4b7b      	ldr	r3, [pc, #492]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	220c      	movs	r2, #12
 8002404:	4013      	ands	r3, r2
 8002406:	d00e      	beq.n	8002426 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002408:	4b78      	ldr	r3, [pc, #480]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	220c      	movs	r2, #12
 800240e:	4013      	ands	r3, r2
 8002410:	2b08      	cmp	r3, #8
 8002412:	d11f      	bne.n	8002454 <HAL_RCC_OscConfig+0x19c>
 8002414:	4b75      	ldr	r3, [pc, #468]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	23c0      	movs	r3, #192	; 0xc0
 800241a:	025b      	lsls	r3, r3, #9
 800241c:	401a      	ands	r2, r3
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	429a      	cmp	r2, r3
 8002424:	d116      	bne.n	8002454 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	4b71      	ldr	r3, [pc, #452]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2202      	movs	r2, #2
 800242c:	4013      	ands	r3, r2
 800242e:	d005      	beq.n	800243c <HAL_RCC_OscConfig+0x184>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d001      	beq.n	800243c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e24c      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243c:	4b6b      	ldr	r3, [pc, #428]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	22f8      	movs	r2, #248	; 0xf8
 8002442:	4393      	bics	r3, r2
 8002444:	0019      	movs	r1, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	00da      	lsls	r2, r3, #3
 800244c:	4b67      	ldr	r3, [pc, #412]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800244e:	430a      	orrs	r2, r1
 8002450:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002452:	e041      	b.n	80024d8 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d024      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245c:	4b63      	ldr	r3, [pc, #396]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b62      	ldr	r3, [pc, #392]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002462:	2101      	movs	r1, #1
 8002464:	430a      	orrs	r2, r1
 8002466:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7fe fed4 	bl	8001214 <HAL_GetTick>
 800246c:	0003      	movs	r3, r0
 800246e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002472:	f7fe fecf 	bl	8001214 <HAL_GetTick>
 8002476:	0002      	movs	r2, r0
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e228      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002484:	4b59      	ldr	r3, [pc, #356]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2202      	movs	r2, #2
 800248a:	4013      	ands	r3, r2
 800248c:	d0f1      	beq.n	8002472 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248e:	4b57      	ldr	r3, [pc, #348]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	22f8      	movs	r2, #248	; 0xf8
 8002494:	4393      	bics	r3, r2
 8002496:	0019      	movs	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	00da      	lsls	r2, r3, #3
 800249e:	4b53      	ldr	r3, [pc, #332]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80024a0:	430a      	orrs	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e018      	b.n	80024d8 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a6:	4b51      	ldr	r3, [pc, #324]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	4b50      	ldr	r3, [pc, #320]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80024ac:	2101      	movs	r1, #1
 80024ae:	438a      	bics	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7fe feaf 	bl	8001214 <HAL_GetTick>
 80024b6:	0003      	movs	r3, r0
 80024b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024bc:	f7fe feaa 	bl	8001214 <HAL_GetTick>
 80024c0:	0002      	movs	r2, r0
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e203      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ce:	4b47      	ldr	r3, [pc, #284]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2202      	movs	r2, #2
 80024d4:	4013      	ands	r3, r2
 80024d6:	d1f1      	bne.n	80024bc <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2208      	movs	r2, #8
 80024de:	4013      	ands	r3, r2
 80024e0:	d036      	beq.n	8002550 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d019      	beq.n	800251e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ea:	4b40      	ldr	r3, [pc, #256]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80024ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ee:	4b3f      	ldr	r3, [pc, #252]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80024f0:	2101      	movs	r1, #1
 80024f2:	430a      	orrs	r2, r1
 80024f4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f6:	f7fe fe8d 	bl	8001214 <HAL_GetTick>
 80024fa:	0003      	movs	r3, r0
 80024fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002500:	f7fe fe88 	bl	8001214 <HAL_GetTick>
 8002504:	0002      	movs	r2, r0
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e1e1      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002512:	4b36      	ldr	r3, [pc, #216]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	2202      	movs	r2, #2
 8002518:	4013      	ands	r3, r2
 800251a:	d0f1      	beq.n	8002500 <HAL_RCC_OscConfig+0x248>
 800251c:	e018      	b.n	8002550 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800251e:	4b33      	ldr	r3, [pc, #204]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002522:	4b32      	ldr	r3, [pc, #200]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002524:	2101      	movs	r1, #1
 8002526:	438a      	bics	r2, r1
 8002528:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252a:	f7fe fe73 	bl	8001214 <HAL_GetTick>
 800252e:	0003      	movs	r3, r0
 8002530:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002534:	f7fe fe6e 	bl	8001214 <HAL_GetTick>
 8002538:	0002      	movs	r2, r0
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e1c7      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002546:	4b29      	ldr	r3, [pc, #164]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	2202      	movs	r2, #2
 800254c:	4013      	ands	r3, r2
 800254e:	d1f1      	bne.n	8002534 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2204      	movs	r2, #4
 8002556:	4013      	ands	r3, r2
 8002558:	d100      	bne.n	800255c <HAL_RCC_OscConfig+0x2a4>
 800255a:	e0b5      	b.n	80026c8 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255c:	201f      	movs	r0, #31
 800255e:	183b      	adds	r3, r7, r0
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002564:	4b21      	ldr	r3, [pc, #132]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002566:	69da      	ldr	r2, [r3, #28]
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	055b      	lsls	r3, r3, #21
 800256c:	4013      	ands	r3, r2
 800256e:	d110      	bne.n	8002592 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002570:	4b1e      	ldr	r3, [pc, #120]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002572:	69da      	ldr	r2, [r3, #28]
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002576:	2180      	movs	r1, #128	; 0x80
 8002578:	0549      	lsls	r1, r1, #21
 800257a:	430a      	orrs	r2, r1
 800257c:	61da      	str	r2, [r3, #28]
 800257e:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 8002580:	69da      	ldr	r2, [r3, #28]
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	055b      	lsls	r3, r3, #21
 8002586:	4013      	ands	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800258c:	183b      	adds	r3, r7, r0
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002592:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_RCC_OscConfig+0x340>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4013      	ands	r3, r2
 800259c:	d11a      	bne.n	80025d4 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800259e:	4b16      	ldr	r3, [pc, #88]	; (80025f8 <HAL_RCC_OscConfig+0x340>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <HAL_RCC_OscConfig+0x340>)
 80025a4:	2180      	movs	r1, #128	; 0x80
 80025a6:	0049      	lsls	r1, r1, #1
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ac:	f7fe fe32 	bl	8001214 <HAL_GetTick>
 80025b0:	0003      	movs	r3, r0
 80025b2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b6:	f7fe fe2d 	bl	8001214 <HAL_GetTick>
 80025ba:	0002      	movs	r2, r0
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b64      	cmp	r3, #100	; 0x64
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e186      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_RCC_OscConfig+0x340>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4013      	ands	r3, r2
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d10f      	bne.n	80025fc <HAL_RCC_OscConfig+0x344>
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80025de:	6a1a      	ldr	r2, [r3, #32]
 80025e0:	4b02      	ldr	r3, [pc, #8]	; (80025ec <HAL_RCC_OscConfig+0x334>)
 80025e2:	2101      	movs	r1, #1
 80025e4:	430a      	orrs	r2, r1
 80025e6:	621a      	str	r2, [r3, #32]
 80025e8:	e036      	b.n	8002658 <HAL_RCC_OscConfig+0x3a0>
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	40021000 	.word	0x40021000
 80025f0:	fffeffff 	.word	0xfffeffff
 80025f4:	fffbffff 	.word	0xfffbffff
 80025f8:	40007000 	.word	0x40007000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10c      	bne.n	800261e <HAL_RCC_OscConfig+0x366>
 8002604:	4bb6      	ldr	r3, [pc, #728]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002606:	6a1a      	ldr	r2, [r3, #32]
 8002608:	4bb5      	ldr	r3, [pc, #724]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800260a:	2101      	movs	r1, #1
 800260c:	438a      	bics	r2, r1
 800260e:	621a      	str	r2, [r3, #32]
 8002610:	4bb3      	ldr	r3, [pc, #716]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002612:	6a1a      	ldr	r2, [r3, #32]
 8002614:	4bb2      	ldr	r3, [pc, #712]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002616:	2104      	movs	r1, #4
 8002618:	438a      	bics	r2, r1
 800261a:	621a      	str	r2, [r3, #32]
 800261c:	e01c      	b.n	8002658 <HAL_RCC_OscConfig+0x3a0>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2b05      	cmp	r3, #5
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0x388>
 8002626:	4bae      	ldr	r3, [pc, #696]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002628:	6a1a      	ldr	r2, [r3, #32]
 800262a:	4bad      	ldr	r3, [pc, #692]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800262c:	2104      	movs	r1, #4
 800262e:	430a      	orrs	r2, r1
 8002630:	621a      	str	r2, [r3, #32]
 8002632:	4bab      	ldr	r3, [pc, #684]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002634:	6a1a      	ldr	r2, [r3, #32]
 8002636:	4baa      	ldr	r3, [pc, #680]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002638:	2101      	movs	r1, #1
 800263a:	430a      	orrs	r2, r1
 800263c:	621a      	str	r2, [r3, #32]
 800263e:	e00b      	b.n	8002658 <HAL_RCC_OscConfig+0x3a0>
 8002640:	4ba7      	ldr	r3, [pc, #668]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002642:	6a1a      	ldr	r2, [r3, #32]
 8002644:	4ba6      	ldr	r3, [pc, #664]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002646:	2101      	movs	r1, #1
 8002648:	438a      	bics	r2, r1
 800264a:	621a      	str	r2, [r3, #32]
 800264c:	4ba4      	ldr	r3, [pc, #656]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800264e:	6a1a      	ldr	r2, [r3, #32]
 8002650:	4ba3      	ldr	r3, [pc, #652]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002652:	2104      	movs	r1, #4
 8002654:	438a      	bics	r2, r1
 8002656:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d014      	beq.n	800268a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002660:	f7fe fdd8 	bl	8001214 <HAL_GetTick>
 8002664:	0003      	movs	r3, r0
 8002666:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002668:	e009      	b.n	800267e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800266a:	f7fe fdd3 	bl	8001214 <HAL_GetTick>
 800266e:	0002      	movs	r2, r0
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	4a9b      	ldr	r2, [pc, #620]	; (80028e4 <HAL_RCC_OscConfig+0x62c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e12b      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267e:	4b98      	ldr	r3, [pc, #608]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	2202      	movs	r2, #2
 8002684:	4013      	ands	r3, r2
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x3b2>
 8002688:	e013      	b.n	80026b2 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268a:	f7fe fdc3 	bl	8001214 <HAL_GetTick>
 800268e:	0003      	movs	r3, r0
 8002690:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002692:	e009      	b.n	80026a8 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002694:	f7fe fdbe 	bl	8001214 <HAL_GetTick>
 8002698:	0002      	movs	r2, r0
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	4a91      	ldr	r2, [pc, #580]	; (80028e4 <HAL_RCC_OscConfig+0x62c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e116      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a8:	4b8d      	ldr	r3, [pc, #564]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	2202      	movs	r2, #2
 80026ae:	4013      	ands	r3, r2
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026b2:	231f      	movs	r3, #31
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d105      	bne.n	80026c8 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026bc:	4b88      	ldr	r3, [pc, #544]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80026be:	69da      	ldr	r2, [r3, #28]
 80026c0:	4b87      	ldr	r3, [pc, #540]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80026c2:	4989      	ldr	r1, [pc, #548]	; (80028e8 <HAL_RCC_OscConfig+0x630>)
 80026c4:	400a      	ands	r2, r1
 80026c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2210      	movs	r2, #16
 80026ce:	4013      	ands	r3, r2
 80026d0:	d063      	beq.n	800279a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d12a      	bne.n	8002730 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80026da:	4b81      	ldr	r3, [pc, #516]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80026dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026de:	4b80      	ldr	r3, [pc, #512]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80026e0:	2104      	movs	r1, #4
 80026e2:	430a      	orrs	r2, r1
 80026e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80026e6:	4b7e      	ldr	r3, [pc, #504]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80026e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ea:	4b7d      	ldr	r3, [pc, #500]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80026ec:	2101      	movs	r1, #1
 80026ee:	430a      	orrs	r2, r1
 80026f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f2:	f7fe fd8f 	bl	8001214 <HAL_GetTick>
 80026f6:	0003      	movs	r3, r0
 80026f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80026fc:	f7fe fd8a 	bl	8001214 <HAL_GetTick>
 8002700:	0002      	movs	r2, r0
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e0e3      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800270e:	4b74      	ldr	r3, [pc, #464]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002712:	2202      	movs	r2, #2
 8002714:	4013      	ands	r3, r2
 8002716:	d0f1      	beq.n	80026fc <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002718:	4b71      	ldr	r3, [pc, #452]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800271a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271c:	22f8      	movs	r2, #248	; 0xf8
 800271e:	4393      	bics	r3, r2
 8002720:	0019      	movs	r1, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	00da      	lsls	r2, r3, #3
 8002728:	4b6d      	ldr	r3, [pc, #436]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800272a:	430a      	orrs	r2, r1
 800272c:	635a      	str	r2, [r3, #52]	; 0x34
 800272e:	e034      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	3305      	adds	r3, #5
 8002736:	d111      	bne.n	800275c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002738:	4b69      	ldr	r3, [pc, #420]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800273a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800273c:	4b68      	ldr	r3, [pc, #416]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800273e:	2104      	movs	r1, #4
 8002740:	438a      	bics	r2, r1
 8002742:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002744:	4b66      	ldr	r3, [pc, #408]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002748:	22f8      	movs	r2, #248	; 0xf8
 800274a:	4393      	bics	r3, r2
 800274c:	0019      	movs	r1, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	00da      	lsls	r2, r3, #3
 8002754:	4b62      	ldr	r3, [pc, #392]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002756:	430a      	orrs	r2, r1
 8002758:	635a      	str	r2, [r3, #52]	; 0x34
 800275a:	e01e      	b.n	800279a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800275c:	4b60      	ldr	r3, [pc, #384]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800275e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002760:	4b5f      	ldr	r3, [pc, #380]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002762:	2104      	movs	r1, #4
 8002764:	430a      	orrs	r2, r1
 8002766:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002768:	4b5d      	ldr	r3, [pc, #372]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800276a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800276c:	4b5c      	ldr	r3, [pc, #368]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800276e:	2101      	movs	r1, #1
 8002770:	438a      	bics	r2, r1
 8002772:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002774:	f7fe fd4e 	bl	8001214 <HAL_GetTick>
 8002778:	0003      	movs	r3, r0
 800277a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800277e:	f7fe fd49 	bl	8001214 <HAL_GetTick>
 8002782:	0002      	movs	r2, r0
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e0a2      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002790:	4b53      	ldr	r3, [pc, #332]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002794:	2202      	movs	r2, #2
 8002796:	4013      	ands	r3, r2
 8002798:	d1f1      	bne.n	800277e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d100      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4ec>
 80027a2:	e097      	b.n	80028d4 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a4:	4b4e      	ldr	r3, [pc, #312]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	220c      	movs	r2, #12
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d100      	bne.n	80027b2 <HAL_RCC_OscConfig+0x4fa>
 80027b0:	e06b      	b.n	800288a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d14c      	bne.n	8002854 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ba:	4b49      	ldr	r3, [pc, #292]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	4b48      	ldr	r3, [pc, #288]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80027c0:	494a      	ldr	r1, [pc, #296]	; (80028ec <HAL_RCC_OscConfig+0x634>)
 80027c2:	400a      	ands	r2, r1
 80027c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c6:	f7fe fd25 	bl	8001214 <HAL_GetTick>
 80027ca:	0003      	movs	r3, r0
 80027cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d0:	f7fe fd20 	bl	8001214 <HAL_GetTick>
 80027d4:	0002      	movs	r2, r0
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e079      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e2:	4b3f      	ldr	r3, [pc, #252]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	049b      	lsls	r3, r3, #18
 80027ea:	4013      	ands	r3, r2
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ee:	4b3c      	ldr	r3, [pc, #240]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	220f      	movs	r2, #15
 80027f4:	4393      	bics	r3, r2
 80027f6:	0019      	movs	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fc:	4b38      	ldr	r3, [pc, #224]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 80027fe:	430a      	orrs	r2, r1
 8002800:	62da      	str	r2, [r3, #44]	; 0x2c
 8002802:	4b37      	ldr	r3, [pc, #220]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4a3a      	ldr	r2, [pc, #232]	; (80028f0 <HAL_RCC_OscConfig+0x638>)
 8002808:	4013      	ands	r3, r2
 800280a:	0019      	movs	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	431a      	orrs	r2, r3
 8002816:	4b32      	ldr	r3, [pc, #200]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002818:	430a      	orrs	r2, r1
 800281a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800281c:	4b30      	ldr	r3, [pc, #192]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b2f      	ldr	r3, [pc, #188]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002822:	2180      	movs	r1, #128	; 0x80
 8002824:	0449      	lsls	r1, r1, #17
 8002826:	430a      	orrs	r2, r1
 8002828:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282a:	f7fe fcf3 	bl	8001214 <HAL_GetTick>
 800282e:	0003      	movs	r3, r0
 8002830:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002834:	f7fe fcee 	bl	8001214 <HAL_GetTick>
 8002838:	0002      	movs	r2, r0
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e047      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002846:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	049b      	lsls	r3, r3, #18
 800284e:	4013      	ands	r3, r2
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x57c>
 8002852:	e03f      	b.n	80028d4 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002854:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b21      	ldr	r3, [pc, #132]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800285a:	4924      	ldr	r1, [pc, #144]	; (80028ec <HAL_RCC_OscConfig+0x634>)
 800285c:	400a      	ands	r2, r1
 800285e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7fe fcd8 	bl	8001214 <HAL_GetTick>
 8002864:	0003      	movs	r3, r0
 8002866:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286a:	f7fe fcd3 	bl	8001214 <HAL_GetTick>
 800286e:	0002      	movs	r2, r0
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e02c      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287c:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	049b      	lsls	r3, r3, #18
 8002884:	4013      	ands	r3, r2
 8002886:	d1f0      	bne.n	800286a <HAL_RCC_OscConfig+0x5b2>
 8002888:	e024      	b.n	80028d4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e01f      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002896:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800289c:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <HAL_RCC_OscConfig+0x628>)
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	23c0      	movs	r3, #192	; 0xc0
 80028a6:	025b      	lsls	r3, r3, #9
 80028a8:	401a      	ands	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d10e      	bne.n	80028d0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	220f      	movs	r2, #15
 80028b6:	401a      	ands	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d107      	bne.n	80028d0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	23f0      	movs	r3, #240	; 0xf0
 80028c4:	039b      	lsls	r3, r3, #14
 80028c6:	401a      	ands	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	0018      	movs	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	b008      	add	sp, #32
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	40021000 	.word	0x40021000
 80028e4:	00001388 	.word	0x00001388
 80028e8:	efffffff 	.word	0xefffffff
 80028ec:	feffffff 	.word	0xfeffffff
 80028f0:	ffc27fff 	.word	0xffc27fff

080028f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0b3      	b.n	8002a70 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002908:	4b5b      	ldr	r3, [pc, #364]	; (8002a78 <HAL_RCC_ClockConfig+0x184>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2201      	movs	r2, #1
 800290e:	4013      	ands	r3, r2
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d911      	bls.n	800293a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b58      	ldr	r3, [pc, #352]	; (8002a78 <HAL_RCC_ClockConfig+0x184>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2201      	movs	r2, #1
 800291c:	4393      	bics	r3, r2
 800291e:	0019      	movs	r1, r3
 8002920:	4b55      	ldr	r3, [pc, #340]	; (8002a78 <HAL_RCC_ClockConfig+0x184>)
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002928:	4b53      	ldr	r3, [pc, #332]	; (8002a78 <HAL_RCC_ClockConfig+0x184>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2201      	movs	r2, #1
 800292e:	4013      	ands	r3, r2
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d001      	beq.n	800293a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e09a      	b.n	8002a70 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2202      	movs	r2, #2
 8002940:	4013      	ands	r3, r2
 8002942:	d015      	beq.n	8002970 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2204      	movs	r2, #4
 800294a:	4013      	ands	r3, r2
 800294c:	d006      	beq.n	800295c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800294e:	4b4b      	ldr	r3, [pc, #300]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 8002954:	21e0      	movs	r1, #224	; 0xe0
 8002956:	00c9      	lsls	r1, r1, #3
 8002958:	430a      	orrs	r2, r1
 800295a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800295c:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	22f0      	movs	r2, #240	; 0xf0
 8002962:	4393      	bics	r3, r2
 8002964:	0019      	movs	r1, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	4b44      	ldr	r3, [pc, #272]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 800296c:	430a      	orrs	r2, r1
 800296e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2201      	movs	r2, #1
 8002976:	4013      	ands	r3, r2
 8002978:	d040      	beq.n	80029fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	4b3e      	ldr	r3, [pc, #248]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	029b      	lsls	r3, r3, #10
 800298a:	4013      	ands	r3, r2
 800298c:	d114      	bne.n	80029b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e06e      	b.n	8002a70 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299a:	4b38      	ldr	r3, [pc, #224]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	049b      	lsls	r3, r3, #18
 80029a2:	4013      	ands	r3, r2
 80029a4:	d108      	bne.n	80029b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e062      	b.n	8002a70 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029aa:	4b34      	ldr	r3, [pc, #208]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2202      	movs	r2, #2
 80029b0:	4013      	ands	r3, r2
 80029b2:	d101      	bne.n	80029b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e05b      	b.n	8002a70 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b8:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2203      	movs	r2, #3
 80029be:	4393      	bics	r3, r2
 80029c0:	0019      	movs	r1, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	4b2d      	ldr	r3, [pc, #180]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 80029c8:	430a      	orrs	r2, r1
 80029ca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029cc:	f7fe fc22 	bl	8001214 <HAL_GetTick>
 80029d0:	0003      	movs	r3, r0
 80029d2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d4:	e009      	b.n	80029ea <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d6:	f7fe fc1d 	bl	8001214 <HAL_GetTick>
 80029da:	0002      	movs	r2, r0
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	4a27      	ldr	r2, [pc, #156]	; (8002a80 <HAL_RCC_ClockConfig+0x18c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e042      	b.n	8002a70 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	220c      	movs	r2, #12
 80029f0:	401a      	ands	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d1ec      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029fc:	4b1e      	ldr	r3, [pc, #120]	; (8002a78 <HAL_RCC_ClockConfig+0x184>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2201      	movs	r2, #1
 8002a02:	4013      	ands	r3, r2
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d211      	bcs.n	8002a2e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <HAL_RCC_ClockConfig+0x184>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	4393      	bics	r3, r2
 8002a12:	0019      	movs	r1, r3
 8002a14:	4b18      	ldr	r3, [pc, #96]	; (8002a78 <HAL_RCC_ClockConfig+0x184>)
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1c:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <HAL_RCC_ClockConfig+0x184>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2201      	movs	r2, #1
 8002a22:	4013      	ands	r3, r2
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d001      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e020      	b.n	8002a70 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2204      	movs	r2, #4
 8002a34:	4013      	ands	r3, r2
 8002a36:	d009      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a38:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	4a11      	ldr	r2, [pc, #68]	; (8002a84 <HAL_RCC_ClockConfig+0x190>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	0019      	movs	r1, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a4c:	f000 f820 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8002a50:	0001      	movs	r1, r0
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <HAL_RCC_ClockConfig+0x188>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	220f      	movs	r2, #15
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	4a0a      	ldr	r2, [pc, #40]	; (8002a88 <HAL_RCC_ClockConfig+0x194>)
 8002a5e:	5cd3      	ldrb	r3, [r2, r3]
 8002a60:	000a      	movs	r2, r1
 8002a62:	40da      	lsrs	r2, r3
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_RCC_ClockConfig+0x198>)
 8002a66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f7fe fb8d 	bl	8001188 <HAL_InitTick>
  
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	0018      	movs	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b004      	add	sp, #16
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40022000 	.word	0x40022000
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	00001388 	.word	0x00001388
 8002a84:	fffff8ff 	.word	0xfffff8ff
 8002a88:	080034c0 	.word	0x080034c0
 8002a8c:	20000000 	.word	0x20000000

08002a90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a90:	b590      	push	{r4, r7, lr}
 8002a92:	b08f      	sub	sp, #60	; 0x3c
 8002a94:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002a96:	2314      	movs	r3, #20
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	4a2c      	ldr	r2, [pc, #176]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a9c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a9e:	c313      	stmia	r3!, {r0, r1, r4}
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	4a2a      	ldr	r2, [pc, #168]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002aa8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002aaa:	c313      	stmia	r3!, {r0, r1, r4}
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab8:	2300      	movs	r3, #0
 8002aba:	637b      	str	r3, [r7, #52]	; 0x34
 8002abc:	2300      	movs	r3, #0
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002ac4:	4b23      	ldr	r3, [pc, #140]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002acc:	220c      	movs	r2, #12
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d002      	beq.n	8002ada <HAL_RCC_GetSysClockFreq+0x4a>
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d003      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x50>
 8002ad8:	e02f      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ada:	4b1f      	ldr	r3, [pc, #124]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002adc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ade:	e02f      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae2:	0c9b      	lsrs	r3, r3, #18
 8002ae4:	220f      	movs	r2, #15
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2214      	movs	r2, #20
 8002aea:	18ba      	adds	r2, r7, r2
 8002aec:	5cd3      	ldrb	r3, [r2, r3]
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002af0:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	220f      	movs	r2, #15
 8002af6:	4013      	ands	r3, r2
 8002af8:	1d3a      	adds	r2, r7, #4
 8002afa:	5cd3      	ldrb	r3, [r2, r3]
 8002afc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b00:	23c0      	movs	r3, #192	; 0xc0
 8002b02:	025b      	lsls	r3, r3, #9
 8002b04:	401a      	ands	r2, r3
 8002b06:	2380      	movs	r3, #128	; 0x80
 8002b08:	025b      	lsls	r3, r3, #9
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d109      	bne.n	8002b22 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b10:	4811      	ldr	r0, [pc, #68]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b12:	f7fd faf9 	bl	8000108 <__udivsi3>
 8002b16:	0003      	movs	r3, r0
 8002b18:	001a      	movs	r2, r3
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	4353      	muls	r3, r2
 8002b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b24:	480c      	ldr	r0, [pc, #48]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b26:	f7fd faef 	bl	8000108 <__udivsi3>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	001a      	movs	r2, r3
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	4353      	muls	r3, r2
 8002b32:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b36:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b38:	e002      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b3a:	4b07      	ldr	r3, [pc, #28]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b3c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b3e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002b42:	0018      	movs	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b00f      	add	sp, #60	; 0x3c
 8002b48:	bd90      	pop	{r4, r7, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	080034a0 	.word	0x080034a0
 8002b50:	080034b0 	.word	0x080034b0
 8002b54:	40021000 	.word	0x40021000
 8002b58:	007a1200 	.word	0x007a1200

08002b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b60:	4b02      	ldr	r3, [pc, #8]	; (8002b6c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	20000000 	.word	0x20000000

08002b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002b74:	f7ff fff2 	bl	8002b5c <HAL_RCC_GetHCLKFreq>
 8002b78:	0001      	movs	r1, r0
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	0a1b      	lsrs	r3, r3, #8
 8002b80:	2207      	movs	r2, #7
 8002b82:	4013      	ands	r3, r2
 8002b84:	4a04      	ldr	r2, [pc, #16]	; (8002b98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b86:	5cd3      	ldrb	r3, [r2, r3]
 8002b88:	40d9      	lsrs	r1, r3
 8002b8a:	000b      	movs	r3, r1
}    
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	40021000 	.word	0x40021000
 8002b98:	080034d0 	.word	0x080034d0

08002b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	2380      	movs	r3, #128	; 0x80
 8002bb2:	025b      	lsls	r3, r3, #9
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d100      	bne.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002bb8:	e08e      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002bba:	2017      	movs	r0, #23
 8002bbc:	183b      	adds	r3, r7, r0
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc2:	4b5f      	ldr	r3, [pc, #380]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bc4:	69da      	ldr	r2, [r3, #28]
 8002bc6:	2380      	movs	r3, #128	; 0x80
 8002bc8:	055b      	lsls	r3, r3, #21
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d110      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bce:	4b5c      	ldr	r3, [pc, #368]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bd0:	69da      	ldr	r2, [r3, #28]
 8002bd2:	4b5b      	ldr	r3, [pc, #364]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bd4:	2180      	movs	r1, #128	; 0x80
 8002bd6:	0549      	lsls	r1, r1, #21
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	61da      	str	r2, [r3, #28]
 8002bdc:	4b58      	ldr	r3, [pc, #352]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bde:	69da      	ldr	r2, [r3, #28]
 8002be0:	2380      	movs	r3, #128	; 0x80
 8002be2:	055b      	lsls	r3, r3, #21
 8002be4:	4013      	ands	r3, r2
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bea:	183b      	adds	r3, r7, r0
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf0:	4b54      	ldr	r3, [pc, #336]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d11a      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bfc:	4b51      	ldr	r3, [pc, #324]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4b50      	ldr	r3, [pc, #320]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c02:	2180      	movs	r1, #128	; 0x80
 8002c04:	0049      	lsls	r1, r1, #1
 8002c06:	430a      	orrs	r2, r1
 8002c08:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0a:	f7fe fb03 	bl	8001214 <HAL_GetTick>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c12:	e008      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c14:	f7fe fafe 	bl	8001214 <HAL_GetTick>
 8002c18:	0002      	movs	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e087      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c26:	4b47      	ldr	r3, [pc, #284]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c32:	4b43      	ldr	r3, [pc, #268]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c34:	6a1a      	ldr	r2, [r3, #32]
 8002c36:	23c0      	movs	r3, #192	; 0xc0
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d034      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	23c0      	movs	r3, #192	; 0xc0
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d02c      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c54:	4b3a      	ldr	r3, [pc, #232]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	4a3b      	ldr	r2, [pc, #236]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c5e:	4b38      	ldr	r3, [pc, #224]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c60:	6a1a      	ldr	r2, [r3, #32]
 8002c62:	4b37      	ldr	r3, [pc, #220]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c64:	2180      	movs	r1, #128	; 0x80
 8002c66:	0249      	lsls	r1, r1, #9
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c6c:	4b34      	ldr	r3, [pc, #208]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c6e:	6a1a      	ldr	r2, [r3, #32]
 8002c70:	4b33      	ldr	r3, [pc, #204]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c72:	4936      	ldr	r1, [pc, #216]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c74:	400a      	ands	r2, r1
 8002c76:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c78:	4b31      	ldr	r3, [pc, #196]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	4013      	ands	r3, r2
 8002c84:	d013      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c86:	f7fe fac5 	bl	8001214 <HAL_GetTick>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8e:	e009      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c90:	f7fe fac0 	bl	8001214 <HAL_GetTick>
 8002c94:	0002      	movs	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	4a2d      	ldr	r2, [pc, #180]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e048      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca4:	4b26      	ldr	r3, [pc, #152]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	2202      	movs	r2, #2
 8002caa:	4013      	ands	r3, r2
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cae:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	4a25      	ldr	r2, [pc, #148]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	0019      	movs	r1, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cc2:	2317      	movs	r3, #23
 8002cc4:	18fb      	adds	r3, r7, r3
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d105      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ccc:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cce:	69da      	ldr	r2, [r3, #28]
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cd2:	4920      	ldr	r1, [pc, #128]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cd4:	400a      	ands	r2, r1
 8002cd6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d009      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ce2:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	4393      	bics	r3, r2
 8002cea:	0019      	movs	r1, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d009      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d00:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	2210      	movs	r2, #16
 8002d06:	4393      	bics	r3, r2
 8002d08:	0019      	movs	r1, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d10:	430a      	orrs	r2, r1
 8002d12:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	029b      	lsls	r3, r3, #10
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d009      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d20:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	2280      	movs	r2, #128	; 0x80
 8002d26:	4393      	bics	r3, r2
 8002d28:	0019      	movs	r1, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002d30:	430a      	orrs	r2, r1
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	0018      	movs	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b006      	add	sp, #24
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40007000 	.word	0x40007000
 8002d48:	fffffcff 	.word	0xfffffcff
 8002d4c:	fffeffff 	.word	0xfffeffff
 8002d50:	00001388 	.word	0x00001388
 8002d54:	efffffff 	.word	0xefffffff

08002d58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e044      	b.n	8002df4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d107      	bne.n	8002d82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2274      	movs	r2, #116	; 0x74
 8002d76:	2100      	movs	r1, #0
 8002d78:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f7fe f95d 	bl	800103c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2224      	movs	r2, #36	; 0x24
 8002d86:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2101      	movs	r1, #1
 8002d94:	438a      	bics	r2, r1
 8002d96:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f000 f830 	bl	8002e00 <UART_SetConfig>
 8002da0:	0003      	movs	r3, r0
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e024      	b.n	8002df4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	0018      	movs	r0, r3
 8002db6:	f000 f97b 	bl	80030b0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	490d      	ldr	r1, [pc, #52]	; (8002dfc <HAL_UART_Init+0xa4>)
 8002dc6:	400a      	ands	r2, r1
 8002dc8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2108      	movs	r1, #8
 8002dd6:	438a      	bics	r2, r1
 8002dd8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2101      	movs	r1, #1
 8002de6:	430a      	orrs	r2, r1
 8002de8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	0018      	movs	r0, r3
 8002dee:	f000 fa13 	bl	8003218 <UART_CheckIdleState>
 8002df2:	0003      	movs	r3, r0
}
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b002      	add	sp, #8
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	fffff7ff 	.word	0xfffff7ff

08002e00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e08:	231e      	movs	r3, #30
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a97      	ldr	r2, [pc, #604]	; (800308c <UART_SetConfig+0x28c>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4a92      	ldr	r2, [pc, #584]	; (8003090 <UART_SetConfig+0x290>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	0019      	movs	r1, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	4a89      	ldr	r2, [pc, #548]	; (8003094 <UART_SetConfig+0x294>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	0019      	movs	r1, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a85      	ldr	r2, [pc, #532]	; (8003098 <UART_SetConfig+0x298>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d127      	bne.n	8002ed6 <UART_SetConfig+0xd6>
 8002e86:	4b85      	ldr	r3, [pc, #532]	; (800309c <UART_SetConfig+0x29c>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d00d      	beq.n	8002eae <UART_SetConfig+0xae>
 8002e92:	d81b      	bhi.n	8002ecc <UART_SetConfig+0xcc>
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d014      	beq.n	8002ec2 <UART_SetConfig+0xc2>
 8002e98:	d818      	bhi.n	8002ecc <UART_SetConfig+0xcc>
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <UART_SetConfig+0xa4>
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d00a      	beq.n	8002eb8 <UART_SetConfig+0xb8>
 8002ea2:	e013      	b.n	8002ecc <UART_SetConfig+0xcc>
 8002ea4:	231f      	movs	r3, #31
 8002ea6:	18fb      	adds	r3, r7, r3
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	701a      	strb	r2, [r3, #0]
 8002eac:	e035      	b.n	8002f1a <UART_SetConfig+0x11a>
 8002eae:	231f      	movs	r3, #31
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	e030      	b.n	8002f1a <UART_SetConfig+0x11a>
 8002eb8:	231f      	movs	r3, #31
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	701a      	strb	r2, [r3, #0]
 8002ec0:	e02b      	b.n	8002f1a <UART_SetConfig+0x11a>
 8002ec2:	231f      	movs	r3, #31
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	2208      	movs	r2, #8
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	e026      	b.n	8002f1a <UART_SetConfig+0x11a>
 8002ecc:	231f      	movs	r3, #31
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	2210      	movs	r2, #16
 8002ed2:	701a      	strb	r2, [r3, #0]
 8002ed4:	e021      	b.n	8002f1a <UART_SetConfig+0x11a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a71      	ldr	r2, [pc, #452]	; (80030a0 <UART_SetConfig+0x2a0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d104      	bne.n	8002eea <UART_SetConfig+0xea>
 8002ee0:	231f      	movs	r3, #31
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
 8002ee8:	e017      	b.n	8002f1a <UART_SetConfig+0x11a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a6d      	ldr	r2, [pc, #436]	; (80030a4 <UART_SetConfig+0x2a4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d104      	bne.n	8002efe <UART_SetConfig+0xfe>
 8002ef4:	231f      	movs	r3, #31
 8002ef6:	18fb      	adds	r3, r7, r3
 8002ef8:	2200      	movs	r2, #0
 8002efa:	701a      	strb	r2, [r3, #0]
 8002efc:	e00d      	b.n	8002f1a <UART_SetConfig+0x11a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a69      	ldr	r2, [pc, #420]	; (80030a8 <UART_SetConfig+0x2a8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d104      	bne.n	8002f12 <UART_SetConfig+0x112>
 8002f08:	231f      	movs	r3, #31
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	e003      	b.n	8002f1a <UART_SetConfig+0x11a>
 8002f12:	231f      	movs	r3, #31
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	2210      	movs	r2, #16
 8002f18:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69da      	ldr	r2, [r3, #28]
 8002f1e:	2380      	movs	r3, #128	; 0x80
 8002f20:	021b      	lsls	r3, r3, #8
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d15d      	bne.n	8002fe2 <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8002f26:	231f      	movs	r3, #31
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d015      	beq.n	8002f5c <UART_SetConfig+0x15c>
 8002f30:	dc18      	bgt.n	8002f64 <UART_SetConfig+0x164>
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d00d      	beq.n	8002f52 <UART_SetConfig+0x152>
 8002f36:	dc15      	bgt.n	8002f64 <UART_SetConfig+0x164>
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <UART_SetConfig+0x142>
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d005      	beq.n	8002f4c <UART_SetConfig+0x14c>
 8002f40:	e010      	b.n	8002f64 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f42:	f7ff fe15 	bl	8002b70 <HAL_RCC_GetPCLK1Freq>
 8002f46:	0003      	movs	r3, r0
 8002f48:	61bb      	str	r3, [r7, #24]
        break;
 8002f4a:	e012      	b.n	8002f72 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f4c:	4b57      	ldr	r3, [pc, #348]	; (80030ac <UART_SetConfig+0x2ac>)
 8002f4e:	61bb      	str	r3, [r7, #24]
        break;
 8002f50:	e00f      	b.n	8002f72 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f52:	f7ff fd9d 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8002f56:	0003      	movs	r3, r0
 8002f58:	61bb      	str	r3, [r7, #24]
        break;
 8002f5a:	e00a      	b.n	8002f72 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	021b      	lsls	r3, r3, #8
 8002f60:	61bb      	str	r3, [r7, #24]
        break;
 8002f62:	e006      	b.n	8002f72 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f68:	231e      	movs	r3, #30
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
        break;
 8002f70:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d100      	bne.n	8002f7a <UART_SetConfig+0x17a>
 8002f78:	e07b      	b.n	8003072 <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	005a      	lsls	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	085b      	lsrs	r3, r3, #1
 8002f84:	18d2      	adds	r2, r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	0010      	movs	r0, r2
 8002f8e:	f7fd f8bb 	bl	8000108 <__udivsi3>
 8002f92:	0003      	movs	r3, r0
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	2b0f      	cmp	r3, #15
 8002f9c:	d91c      	bls.n	8002fd8 <UART_SetConfig+0x1d8>
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	025b      	lsls	r3, r3, #9
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d217      	bcs.n	8002fd8 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	200e      	movs	r0, #14
 8002fae:	183b      	adds	r3, r7, r0
 8002fb0:	210f      	movs	r1, #15
 8002fb2:	438a      	bics	r2, r1
 8002fb4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	085b      	lsrs	r3, r3, #1
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2207      	movs	r2, #7
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	b299      	uxth	r1, r3
 8002fc2:	183b      	adds	r3, r7, r0
 8002fc4:	183a      	adds	r2, r7, r0
 8002fc6:	8812      	ldrh	r2, [r2, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	183a      	adds	r2, r7, r0
 8002fd2:	8812      	ldrh	r2, [r2, #0]
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	e04c      	b.n	8003072 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8002fd8:	231e      	movs	r3, #30
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	2201      	movs	r2, #1
 8002fde:	701a      	strb	r2, [r3, #0]
 8002fe0:	e047      	b.n	8003072 <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fe2:	231f      	movs	r3, #31
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d015      	beq.n	8003018 <UART_SetConfig+0x218>
 8002fec:	dc18      	bgt.n	8003020 <UART_SetConfig+0x220>
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d00d      	beq.n	800300e <UART_SetConfig+0x20e>
 8002ff2:	dc15      	bgt.n	8003020 <UART_SetConfig+0x220>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <UART_SetConfig+0x1fe>
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d005      	beq.n	8003008 <UART_SetConfig+0x208>
 8002ffc:	e010      	b.n	8003020 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ffe:	f7ff fdb7 	bl	8002b70 <HAL_RCC_GetPCLK1Freq>
 8003002:	0003      	movs	r3, r0
 8003004:	61bb      	str	r3, [r7, #24]
        break;
 8003006:	e012      	b.n	800302e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003008:	4b28      	ldr	r3, [pc, #160]	; (80030ac <UART_SetConfig+0x2ac>)
 800300a:	61bb      	str	r3, [r7, #24]
        break;
 800300c:	e00f      	b.n	800302e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800300e:	f7ff fd3f 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8003012:	0003      	movs	r3, r0
 8003014:	61bb      	str	r3, [r7, #24]
        break;
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	61bb      	str	r3, [r7, #24]
        break;
 800301e:	e006      	b.n	800302e <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003024:	231e      	movs	r3, #30
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	2201      	movs	r2, #1
 800302a:	701a      	strb	r2, [r3, #0]
        break;
 800302c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d01e      	beq.n	8003072 <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	085a      	lsrs	r2, r3, #1
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	18d2      	adds	r2, r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	0019      	movs	r1, r3
 8003044:	0010      	movs	r0, r2
 8003046:	f7fd f85f 	bl	8000108 <__udivsi3>
 800304a:	0003      	movs	r3, r0
 800304c:	b29b      	uxth	r3, r3
 800304e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2b0f      	cmp	r3, #15
 8003054:	d909      	bls.n	800306a <UART_SetConfig+0x26a>
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	025b      	lsls	r3, r3, #9
 800305c:	429a      	cmp	r2, r3
 800305e:	d204      	bcs.n	800306a <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	60da      	str	r2, [r3, #12]
 8003068:	e003      	b.n	8003072 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 800306a:	231e      	movs	r3, #30
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800307e:	231e      	movs	r3, #30
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	781b      	ldrb	r3, [r3, #0]
}
 8003084:	0018      	movs	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	b008      	add	sp, #32
 800308a:	bd80      	pop	{r7, pc}
 800308c:	efff69f3 	.word	0xefff69f3
 8003090:	ffffcfff 	.word	0xffffcfff
 8003094:	fffff4ff 	.word	0xfffff4ff
 8003098:	40013800 	.word	0x40013800
 800309c:	40021000 	.word	0x40021000
 80030a0:	40004400 	.word	0x40004400
 80030a4:	40004800 	.word	0x40004800
 80030a8:	40004c00 	.word	0x40004c00
 80030ac:	007a1200 	.word	0x007a1200

080030b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	2201      	movs	r2, #1
 80030be:	4013      	ands	r3, r2
 80030c0:	d00b      	beq.n	80030da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4a4a      	ldr	r2, [pc, #296]	; (80031f4 <UART_AdvFeatureConfig+0x144>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	0019      	movs	r1, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	2202      	movs	r2, #2
 80030e0:	4013      	ands	r3, r2
 80030e2:	d00b      	beq.n	80030fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4a43      	ldr	r2, [pc, #268]	; (80031f8 <UART_AdvFeatureConfig+0x148>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	0019      	movs	r1, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	2204      	movs	r2, #4
 8003102:	4013      	ands	r3, r2
 8003104:	d00b      	beq.n	800311e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4a3b      	ldr	r2, [pc, #236]	; (80031fc <UART_AdvFeatureConfig+0x14c>)
 800310e:	4013      	ands	r3, r2
 8003110:	0019      	movs	r1, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	2208      	movs	r2, #8
 8003124:	4013      	ands	r3, r2
 8003126:	d00b      	beq.n	8003140 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4a34      	ldr	r2, [pc, #208]	; (8003200 <UART_AdvFeatureConfig+0x150>)
 8003130:	4013      	ands	r3, r2
 8003132:	0019      	movs	r1, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	2210      	movs	r2, #16
 8003146:	4013      	ands	r3, r2
 8003148:	d00b      	beq.n	8003162 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	4a2c      	ldr	r2, [pc, #176]	; (8003204 <UART_AdvFeatureConfig+0x154>)
 8003152:	4013      	ands	r3, r2
 8003154:	0019      	movs	r1, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	2220      	movs	r2, #32
 8003168:	4013      	ands	r3, r2
 800316a:	d00b      	beq.n	8003184 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	4a25      	ldr	r2, [pc, #148]	; (8003208 <UART_AdvFeatureConfig+0x158>)
 8003174:	4013      	ands	r3, r2
 8003176:	0019      	movs	r1, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	2240      	movs	r2, #64	; 0x40
 800318a:	4013      	ands	r3, r2
 800318c:	d01d      	beq.n	80031ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	4a1d      	ldr	r2, [pc, #116]	; (800320c <UART_AdvFeatureConfig+0x15c>)
 8003196:	4013      	ands	r3, r2
 8003198:	0019      	movs	r1, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031aa:	2380      	movs	r3, #128	; 0x80
 80031ac:	035b      	lsls	r3, r3, #13
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d10b      	bne.n	80031ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	4a15      	ldr	r2, [pc, #84]	; (8003210 <UART_AdvFeatureConfig+0x160>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	0019      	movs	r1, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	2280      	movs	r2, #128	; 0x80
 80031d0:	4013      	ands	r3, r2
 80031d2:	d00b      	beq.n	80031ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4a0e      	ldr	r2, [pc, #56]	; (8003214 <UART_AdvFeatureConfig+0x164>)
 80031dc:	4013      	ands	r3, r2
 80031de:	0019      	movs	r1, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	605a      	str	r2, [r3, #4]
  }
}
 80031ec:	46c0      	nop			; (mov r8, r8)
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b002      	add	sp, #8
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	fffdffff 	.word	0xfffdffff
 80031f8:	fffeffff 	.word	0xfffeffff
 80031fc:	fffbffff 	.word	0xfffbffff
 8003200:	ffff7fff 	.word	0xffff7fff
 8003204:	ffffefff 	.word	0xffffefff
 8003208:	ffffdfff 	.word	0xffffdfff
 800320c:	ffefffff 	.word	0xffefffff
 8003210:	ff9fffff 	.word	0xff9fffff
 8003214:	fff7ffff 	.word	0xfff7ffff

08003218 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af02      	add	r7, sp, #8
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2280      	movs	r2, #128	; 0x80
 8003224:	2100      	movs	r1, #0
 8003226:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003228:	f7fd fff4 	bl	8001214 <HAL_GetTick>
 800322c:	0003      	movs	r3, r0
 800322e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2208      	movs	r2, #8
 8003238:	4013      	ands	r3, r2
 800323a:	2b08      	cmp	r3, #8
 800323c:	d10c      	bne.n	8003258 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2280      	movs	r2, #128	; 0x80
 8003242:	0391      	lsls	r1, r2, #14
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	4a17      	ldr	r2, [pc, #92]	; (80032a4 <UART_CheckIdleState+0x8c>)
 8003248:	9200      	str	r2, [sp, #0]
 800324a:	2200      	movs	r2, #0
 800324c:	f000 f82c 	bl	80032a8 <UART_WaitOnFlagUntilTimeout>
 8003250:	1e03      	subs	r3, r0, #0
 8003252:	d001      	beq.n	8003258 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e021      	b.n	800329c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2204      	movs	r2, #4
 8003260:	4013      	ands	r3, r2
 8003262:	2b04      	cmp	r3, #4
 8003264:	d10c      	bne.n	8003280 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2280      	movs	r2, #128	; 0x80
 800326a:	03d1      	lsls	r1, r2, #15
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	4a0d      	ldr	r2, [pc, #52]	; (80032a4 <UART_CheckIdleState+0x8c>)
 8003270:	9200      	str	r2, [sp, #0]
 8003272:	2200      	movs	r2, #0
 8003274:	f000 f818 	bl	80032a8 <UART_WaitOnFlagUntilTimeout>
 8003278:	1e03      	subs	r3, r0, #0
 800327a:	d001      	beq.n	8003280 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e00d      	b.n	800329c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2220      	movs	r2, #32
 8003284:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2220      	movs	r2, #32
 800328a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2274      	movs	r2, #116	; 0x74
 8003296:	2100      	movs	r1, #0
 8003298:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	0018      	movs	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	b004      	add	sp, #16
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	01ffffff 	.word	0x01ffffff

080032a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b094      	sub	sp, #80	; 0x50
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	1dfb      	adds	r3, r7, #7
 80032b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b8:	e0a3      	b.n	8003402 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032bc:	3301      	adds	r3, #1
 80032be:	d100      	bne.n	80032c2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80032c0:	e09f      	b.n	8003402 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c2:	f7fd ffa7 	bl	8001214 <HAL_GetTick>
 80032c6:	0002      	movs	r2, r0
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d302      	bcc.n	80032d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80032d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d13d      	bne.n	8003354 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032d8:	f3ef 8310 	mrs	r3, PRIMASK
 80032dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80032de:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032e0:	647b      	str	r3, [r7, #68]	; 0x44
 80032e2:	2301      	movs	r3, #1
 80032e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e8:	f383 8810 	msr	PRIMASK, r3
}
 80032ec:	46c0      	nop			; (mov r8, r8)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	494c      	ldr	r1, [pc, #304]	; (800342c <UART_WaitOnFlagUntilTimeout+0x184>)
 80032fa:	400a      	ands	r2, r1
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003300:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003304:	f383 8810 	msr	PRIMASK, r3
}
 8003308:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800330a:	f3ef 8310 	mrs	r3, PRIMASK
 800330e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003312:	643b      	str	r3, [r7, #64]	; 0x40
 8003314:	2301      	movs	r3, #1
 8003316:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331a:	f383 8810 	msr	PRIMASK, r3
}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2101      	movs	r1, #1
 800332c:	438a      	bics	r2, r1
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003332:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003336:	f383 8810 	msr	PRIMASK, r3
}
 800333a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2220      	movs	r2, #32
 8003346:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2274      	movs	r2, #116	; 0x74
 800334c:	2100      	movs	r1, #0
 800334e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e067      	b.n	8003424 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2204      	movs	r2, #4
 800335c:	4013      	ands	r3, r2
 800335e:	d050      	beq.n	8003402 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	69da      	ldr	r2, [r3, #28]
 8003366:	2380      	movs	r3, #128	; 0x80
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	401a      	ands	r2, r3
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	429a      	cmp	r2, r3
 8003372:	d146      	bne.n	8003402 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2280      	movs	r2, #128	; 0x80
 800337a:	0112      	lsls	r2, r2, #4
 800337c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800337e:	f3ef 8310 	mrs	r3, PRIMASK
 8003382:	613b      	str	r3, [r7, #16]
  return(result);
 8003384:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003388:	2301      	movs	r3, #1
 800338a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f383 8810 	msr	PRIMASK, r3
}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4923      	ldr	r1, [pc, #140]	; (800342c <UART_WaitOnFlagUntilTimeout+0x184>)
 80033a0:	400a      	ands	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	f383 8810 	msr	PRIMASK, r3
}
 80033ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033b0:	f3ef 8310 	mrs	r3, PRIMASK
 80033b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80033b6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80033ba:	2301      	movs	r3, #1
 80033bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	f383 8810 	msr	PRIMASK, r3
}
 80033c4:	46c0      	nop			; (mov r8, r8)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2101      	movs	r1, #1
 80033d2:	438a      	bics	r2, r1
 80033d4:	609a      	str	r2, [r3, #8]
 80033d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	f383 8810 	msr	PRIMASK, r3
}
 80033e0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2220      	movs	r2, #32
 80033e6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2280      	movs	r2, #128	; 0x80
 80033f2:	2120      	movs	r1, #32
 80033f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2274      	movs	r2, #116	; 0x74
 80033fa:	2100      	movs	r1, #0
 80033fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e010      	b.n	8003424 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	4013      	ands	r3, r2
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	425a      	negs	r2, r3
 8003412:	4153      	adcs	r3, r2
 8003414:	b2db      	uxtb	r3, r3
 8003416:	001a      	movs	r2, r3
 8003418:	1dfb      	adds	r3, r7, #7
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d100      	bne.n	8003422 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003420:	e74b      	b.n	80032ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	0018      	movs	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	b014      	add	sp, #80	; 0x50
 800342a:	bd80      	pop	{r7, pc}
 800342c:	fffffe5f 	.word	0xfffffe5f

08003430 <__libc_init_array>:
 8003430:	b570      	push	{r4, r5, r6, lr}
 8003432:	2600      	movs	r6, #0
 8003434:	4d0c      	ldr	r5, [pc, #48]	; (8003468 <__libc_init_array+0x38>)
 8003436:	4c0d      	ldr	r4, [pc, #52]	; (800346c <__libc_init_array+0x3c>)
 8003438:	1b64      	subs	r4, r4, r5
 800343a:	10a4      	asrs	r4, r4, #2
 800343c:	42a6      	cmp	r6, r4
 800343e:	d109      	bne.n	8003454 <__libc_init_array+0x24>
 8003440:	2600      	movs	r6, #0
 8003442:	f000 f821 	bl	8003488 <_init>
 8003446:	4d0a      	ldr	r5, [pc, #40]	; (8003470 <__libc_init_array+0x40>)
 8003448:	4c0a      	ldr	r4, [pc, #40]	; (8003474 <__libc_init_array+0x44>)
 800344a:	1b64      	subs	r4, r4, r5
 800344c:	10a4      	asrs	r4, r4, #2
 800344e:	42a6      	cmp	r6, r4
 8003450:	d105      	bne.n	800345e <__libc_init_array+0x2e>
 8003452:	bd70      	pop	{r4, r5, r6, pc}
 8003454:	00b3      	lsls	r3, r6, #2
 8003456:	58eb      	ldr	r3, [r5, r3]
 8003458:	4798      	blx	r3
 800345a:	3601      	adds	r6, #1
 800345c:	e7ee      	b.n	800343c <__libc_init_array+0xc>
 800345e:	00b3      	lsls	r3, r6, #2
 8003460:	58eb      	ldr	r3, [r5, r3]
 8003462:	4798      	blx	r3
 8003464:	3601      	adds	r6, #1
 8003466:	e7f2      	b.n	800344e <__libc_init_array+0x1e>
 8003468:	080034d8 	.word	0x080034d8
 800346c:	080034d8 	.word	0x080034d8
 8003470:	080034d8 	.word	0x080034d8
 8003474:	080034dc 	.word	0x080034dc

08003478 <memset>:
 8003478:	0003      	movs	r3, r0
 800347a:	1882      	adds	r2, r0, r2
 800347c:	4293      	cmp	r3, r2
 800347e:	d100      	bne.n	8003482 <memset+0xa>
 8003480:	4770      	bx	lr
 8003482:	7019      	strb	r1, [r3, #0]
 8003484:	3301      	adds	r3, #1
 8003486:	e7f9      	b.n	800347c <memset+0x4>

08003488 <_init>:
 8003488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348e:	bc08      	pop	{r3}
 8003490:	469e      	mov	lr, r3
 8003492:	4770      	bx	lr

08003494 <_fini>:
 8003494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800349a:	bc08      	pop	{r3}
 800349c:	469e      	mov	lr, r3
 800349e:	4770      	bx	lr
